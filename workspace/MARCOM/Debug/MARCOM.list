
MARCOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  0800503c  0800503c  0001503c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ec  080058ec  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  080058ec  080058ec  000158ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f4  080058f4  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f4  080058f4  000158f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  080058fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  200002d8  08005bd4  000202d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08005bd4  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaff  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003065  00000000  00000000  0002ee07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00031e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00032db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e05  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cd7  00000000  00000000  0005794d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc761  00000000  00000000  0006c624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138d85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fc4  00000000  00000000  00138dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005024 	.word	0x08005024

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	08005024 	.word	0x08005024

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <Accelerometer_Init>:

/* ----------------- Public functions ------------------------ */

/** Initializing the MEMS sensor. It contains the SPI initialization as well. */
void Accelerometer_Init()
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result = SPI_Init();
 800057a:	f000 fc02 	bl	8000d82 <SPI_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]
	if (result != HAL_OK)
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d006      	beq.n	8000596 <Accelerometer_Init+0x22>
	{
		Log_LogStringAndHalStatus("Accelerometer_Init: SPI_Init() failed.\n\r", LOGLEVEL_NORMAL, result);
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	461a      	mov	r2, r3
 800058c:	2102      	movs	r1, #2
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <Accelerometer_Init+0x68>)
 8000590:	f001 f85c 	bl	800164c <Log_LogStringAndHalStatus>
 8000594:	e01e      	b.n	80005d4 <Accelerometer_Init+0x60>
		return;
	}

	LIS302DL_InitTypeDef LIS302DL_InitStructure;
	LIS302DL_InitStructure.Power_Mode = LIS302DL_LOWPOWERMODE_ACTIVE;
 8000596:	2340      	movs	r3, #64	; 0x40
 8000598:	723b      	strb	r3, [r7, #8]
	LIS302DL_InitStructure.Output_DataRate = LIS302DL_DATARATE_100;
 800059a:	2300      	movs	r3, #0
 800059c:	727b      	strb	r3, [r7, #9]
	LIS302DL_InitStructure.Axes_Enable = LIS302DL_XYZ_ENABLE;
 800059e:	2307      	movs	r3, #7
 80005a0:	72bb      	strb	r3, [r7, #10]
	LIS302DL_InitStructure.Full_Scale = LIS302DL_FULLSCALE_2_3;
 80005a2:	2300      	movs	r3, #0
 80005a4:	72fb      	strb	r3, [r7, #11]
	LIS302DL_InitStructure.Self_Test = LIS302DL_SELFTEST_NORMAL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	733b      	strb	r3, [r7, #12]
	LIS302DL_Init(&LIS302DL_InitStructure);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f86c 	bl	800068c <LIS302DL_Init>
	// The sensor needs some time
	HAL_Delay(30);
 80005b4:	201e      	movs	r0, #30
 80005b6:	f001 fcaf 	bl	8001f18 <HAL_Delay>
	// MEMS High Pass Filter setting
	LIS302DL_FilterConfigTypeDef LIS302DL_FilterStruct;
	LIS302DL_FilterStruct.HighPassFilter_Data_Selection = LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER;
 80005ba:	2320      	movs	r3, #32
 80005bc:	713b      	strb	r3, [r7, #4]
	LIS302DL_FilterStruct.HighPassFilter_CutOff_Frequency = LIS302DL_HIGHPASSFILTER_LEVEL_1;
 80005be:	2301      	movs	r3, #1
 80005c0:	717b      	strb	r3, [r7, #5]
	LIS302DL_FilterStruct.HighPassFilter_Interrupt = LIS302DL_HIGHPASSFILTERINTERRUPT_1_2;
 80005c2:	230c      	movs	r3, #12
 80005c4:	71bb      	strb	r3, [r7, #6]
	LIS302DL_FilterConfig(&LIS302DL_FilterStruct);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 f883 	bl	80006d4 <LIS302DL_FilterConfig>

	memsErrorReported = 0;
 80005ce:	4b04      	ldr	r3, [pc, #16]	; (80005e0 <Accelerometer_Init+0x6c>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	0800503c 	.word	0x0800503c
 80005e0:	200002f4 	.word	0x200002f4

080005e4 <Accelerometer_GetTilt>:

/** Provides the actual acceleration vector. Zero return value indicates success. */
int Accelerometer_GetTilt(int8_t *Xg, int8_t *Yg, int8_t *Zg)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
	unsigned char uBuffer[6];
	uint8_t temp = 0x00;
 80005f0:	2300      	movs	r3, #0
 80005f2:	75fb      	strb	r3, [r7, #23]

	LIS302DL_Read(&temp, LIS302DL_WHO_AM_I_ADDR, 1);
 80005f4:	f107 0317 	add.w	r3, r7, #23
 80005f8:	2201      	movs	r2, #1
 80005fa:	210f      	movs	r1, #15
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f8a9 	bl	8000754 <LIS302DL_Read>
	if (temp != 0x3B)
 8000602:	7dfb      	ldrb	r3, [r7, #23]
 8000604:	2b3b      	cmp	r3, #59	; 0x3b
 8000606:	d015      	beq.n	8000634 <Accelerometer_GetTilt+0x50>
	{
		if (!memsErrorReported)
 8000608:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <Accelerometer_GetTilt+0xa0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d106      	bne.n	800061e <Accelerometer_GetTilt+0x3a>
		{
			Log_LogString("Error: MEMS sensor not found on SPI! Please check jumper JP3, it should be open.\n\r",LOGLEVEL_NORMAL);
 8000610:	2102      	movs	r1, #2
 8000612:	481d      	ldr	r0, [pc, #116]	; (8000688 <Accelerometer_GetTilt+0xa4>)
 8000614:	f001 f806 	bl	8001624 <Log_LogString>
			memsErrorReported = 1;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <Accelerometer_GetTilt+0xa0>)
 800061a:	2201      	movs	r2, #1
 800061c:	601a      	str	r2, [r3, #0]
		}
		*Xg = 0x00;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
		*Yg = 0x00;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
		*Zg = 0x00;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]
		return 1;
 8000630:	2301      	movs	r3, #1
 8000632:	e022      	b.n	800067a <Accelerometer_GetTilt+0x96>
	}
	else
	{
		HAL_Delay(50);
 8000634:	2032      	movs	r0, #50	; 0x32
 8000636:	f001 fc6f 	bl	8001f18 <HAL_Delay>
		LIS302DL_Read(uBuffer, LIS302DL_OUT_X_ADDR, 6);
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2206      	movs	r2, #6
 8000640:	2129      	movs	r1, #41	; 0x29
 8000642:	4618      	mov	r0, r3
 8000644:	f000 f886 	bl	8000754 <LIS302DL_Read>
		*Xg = (signed char)(uBuffer[2])/2;
 8000648:	7ebb      	ldrb	r3, [r7, #26]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	0fda      	lsrs	r2, r3, #31
 800064e:	4413      	add	r3, r2
 8000650:	105b      	asrs	r3, r3, #1
 8000652:	b25a      	sxtb	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	701a      	strb	r2, [r3, #0]
		*Yg = (signed char)(uBuffer[0])/2;
 8000658:	7e3b      	ldrb	r3, [r7, #24]
 800065a:	b25b      	sxtb	r3, r3
 800065c:	0fda      	lsrs	r2, r3, #31
 800065e:	4413      	add	r3, r2
 8000660:	105b      	asrs	r3, r3, #1
 8000662:	b25a      	sxtb	r2, r3
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	701a      	strb	r2, [r3, #0]
		*Zg = (signed char)(uBuffer[4])/2;
 8000668:	7f3b      	ldrb	r3, [r7, #28]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	0fda      	lsrs	r2, r3, #31
 800066e:	4413      	add	r3, r2
 8000670:	105b      	asrs	r3, r3, #1
 8000672:	b25a      	sxtb	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	701a      	strb	r2, [r3, #0]
		return 0;
 8000678:	2300      	movs	r3, #0
	}
}
 800067a:	4618      	mov	r0, r3
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200002f4 	.word	0x200002f4
 8000688:	08005068 	.word	0x08005068

0800068c <LIS302DL_Init>:

/* ----------------- Private functions --------------------------- */

/** LIS302DL IC initialization, called by Accelerometer_Init() */
void LIS302DL_Init(LIS302DL_InitTypeDef *LIS302DL_InitStruct)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 8000694:	2300      	movs	r3, #0
 8000696:	73fb      	strb	r3, [r7, #15]

  /* MEMS settings: data rate, power mode, full scale, self test and axes */
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	785a      	ldrb	r2, [r3, #1]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	78db      	ldrb	r3, [r3, #3]
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Full_Scale | LIS302DL_InitStruct->Self_Test | \
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 80006b0:	4313      	orrs	r3, r2
 80006b2:	b2da      	uxtb	r2, r3
                    LIS302DL_InitStruct->Axes_Enable);
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	789b      	ldrb	r3, [r3, #2]
  ctrl = (uint8_t) (LIS302DL_InitStruct->Output_DataRate | LIS302DL_InitStruct->Power_Mode | \
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	73fb      	strb	r3, [r7, #15]

  /* Write settings to the CTRL_REG1 register of the sensor IC */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG1_ADDR, 1);
 80006be:	f107 030f 	add.w	r3, r7, #15
 80006c2:	2201      	movs	r2, #1
 80006c4:	2120      	movs	r1, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 f82f 	bl	800072a <LIS302DL_Write>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <LIS302DL_FilterConfig>:

/** LIS302DL filter settings, called by Accelerometer_Init() */
void LIS302DL_FilterConfig(LIS302DL_FilterConfigTypeDef *LIS302DL_FilterConfigStruct)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint8_t ctrl = 0x00;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]

  /* CTRL_REG2 register read */
  LIS302DL_Read(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 80006e0:	f107 030f 	add.w	r3, r7, #15
 80006e4:	2201      	movs	r2, #1
 80006e6:	2121      	movs	r1, #33	; 0x21
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 f833 	bl	8000754 <LIS302DL_Read>

  /* Clear corresponding bits first */
  ctrl &= (uint8_t)~(LIS302DL_FILTEREDDATASELECTION_OUTPUTREGISTER | \
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	f023 032f 	bic.w	r3, r3, #47	; 0x2f
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	73fb      	strb	r3, [r7, #15]
                     LIS302DL_HIGHPASSFILTER_LEVEL_3 | \
                     LIS302DL_HIGHPASSFILTERINTERRUPT_1_2);
  /* Then set them appropriately: MEMS high pass filter cut-off level, interrupt and data selection bits. */
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	781a      	ldrb	r2, [r3, #0]
                    LIS302DL_FilterConfigStruct->HighPassFilter_CutOff_Frequency | \
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	785b      	ldrb	r3, [r3, #1]
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 8000700:	4313      	orrs	r3, r2
 8000702:	b2da      	uxtb	r2, r3
                    LIS302DL_FilterConfigStruct->HighPassFilter_Interrupt);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	789b      	ldrb	r3, [r3, #2]
  ctrl |= (uint8_t)(LIS302DL_FilterConfigStruct->HighPassFilter_Data_Selection | \
 8000708:	4313      	orrs	r3, r2
 800070a:	b2da      	uxtb	r2, r3
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	4313      	orrs	r3, r2
 8000710:	b2db      	uxtb	r3, r3
 8000712:	73fb      	strb	r3, [r7, #15]

  /* Write settings back to CTRL_REG2 register */
  LIS302DL_Write(&ctrl, LIS302DL_CTRL_REG2_ADDR, 1);
 8000714:	f107 030f 	add.w	r3, r7, #15
 8000718:	2201      	movs	r2, #1
 800071a:	2121      	movs	r1, #33	; 0x21
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f804 	bl	800072a <LIS302DL_Write>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <LIS302DL_Write>:

/** Writing a specific LIS302DL register (addressed by WriteAddr) */
void LIS302DL_Write(uint8_t* pData, uint8_t WriteAddr, uint16_t dataSize)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	460b      	mov	r3, r1
 8000734:	70fb      	strb	r3, [r7, #3]
 8000736:	4613      	mov	r3, r2
 8000738:	803b      	strh	r3, [r7, #0]
	if(dataSize > 0x01)
 800073a:	883b      	ldrh	r3, [r7, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d903      	bls.n	8000748 <LIS302DL_Write+0x1e>
	{
		// In case of writing multiple bytes, the first byte has to be modified 
		// in order to signalize multibyte command
		WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000746:	70fb      	strb	r3, [r7, #3]
	// 2. Send the value of WriteAddr over SPI (this will select the register in the sensor to be written)
	// 3. Send the actual data passed by pData and dataSize
	// 4. Disable chip select


}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <LIS302DL_Read>:

/** Reading a specific LIS302DL register (addressed by ReadAddr) */
void LIS302DL_Read(uint8_t* pData, uint8_t ReadAddr, uint16_t dataSize)
{
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
 8000760:	4613      	mov	r3, r2
 8000762:	803b      	strh	r3, [r7, #0]
	// In the first byte the reading operation and optionally multibyte transfer are signalized
	if(dataSize > 0x01)
 8000764:	883b      	ldrh	r3, [r7, #0]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d904      	bls.n	8000774 <LIS302DL_Read+0x20>
	{
		ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 800076a:	78fb      	ldrb	r3, [r7, #3]
 800076c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000770:	70fb      	strb	r3, [r7, #3]
 8000772:	e003      	b.n	800077c <LIS302DL_Read+0x28>
	}
	else
	{
		ReadAddr |= (uint8_t)READWRITE_CMD;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800077a:	70fb      	strb	r3, [r7, #3]
	// 3. Receive dataSize amount of bytes and save them to the buffer pointed by pData
	// 4. Disable chip select
	// 5. Erase the dummy code returning zeros
	// (Don't forget to solve the tasks in bsp_spi.c as well!)

	for(int i=0; i<dataSize; i++)
 800077c:	2300      	movs	r3, #0
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	e007      	b.n	8000792 <LIS302DL_Read+0x3e>
	{
		pData[i]=0;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	4413      	add	r3, r2
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<dataSize; i++)
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	3301      	adds	r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	883b      	ldrh	r3, [r7, #0]
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	429a      	cmp	r2, r3
 8000798:	dbf3      	blt.n	8000782 <LIS302DL_Read+0x2e>
	}
}
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	3714      	adds	r7, #20
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <ButtonsSwitches_Init>:
#define 	BUTTON_ALL	(uint16_t)0xf000

/* ----------------- Public functions ------------------------ */

void ButtonsSwitches_Init()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
	__GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <ButtonsSwitches_Init+0x88>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a1e      	ldr	r2, [pc, #120]	; (8000830 <ButtonsSwitches_Init+0x88>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <ButtonsSwitches_Init+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
	__GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <ButtonsSwitches_Init+0x88>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a17      	ldr	r2, [pc, #92]	; (8000830 <ButtonsSwitches_Init+0x88>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <ButtonsSwitches_Init+0x88>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

	// Configure switch inputs
	GPIO_InitTypeDef portInit;
	portInit.Mode = GPIO_MODE_INPUT;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
	portInit.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
	portInit.Speed = GPIO_SPEED_FAST;
 80007ee:	2302      	movs	r3, #2
 80007f0:	61bb      	str	r3, [r7, #24]
	portInit.Pin = GPIO_PIN_2 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 80007f2:	2374      	movs	r3, #116	; 0x74
 80007f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &portInit);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4619      	mov	r1, r3
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <ButtonsSwitches_Init+0x8c>)
 80007fe:	f001 fd85 	bl	800230c <HAL_GPIO_Init>

	// SWEN output
	portInit.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	613b      	str	r3, [r7, #16]
	portInit.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
	portInit.Speed = GPIO_SPEED_FAST;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
	portInit.Pin = GPIO_PIN_6;
 800080e:	2340      	movs	r3, #64	; 0x40
 8000810:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &portInit);
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4619      	mov	r1, r3
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <ButtonsSwitches_Init+0x90>)
 800081a:	f001 fd77 	bl	800230c <HAL_GPIO_Init>

	// Enable switch inputs
	HAL_GPIO_WritePin(GPIOC,GPIO_PIN_6, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2140      	movs	r1, #64	; 0x40
 8000822:	4805      	ldr	r0, [pc, #20]	; (8000838 <ButtonsSwitches_Init+0x90>)
 8000824:	f002 f822 	bl	800286c <HAL_GPIO_WritePin>
}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40021000 	.word	0x40021000
 8000838:	40020800 	.word	0x40020800

0800083c <ButtonsSwitches_GetTestSwitchState>:

/** Read SW3 state */
int ButtonsSwitches_GetTestSwitchState()
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_5);
 8000840:	2120      	movs	r1, #32
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <ButtonsSwitches_GetTestSwitchState+0x14>)
 8000844:	f001 fffa 	bl	800283c <HAL_GPIO_ReadPin>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40021000 	.word	0x40021000

08000854 <ButtonsSwitches_GetGraphicsModeSwitchState>:

/** Read SW4 state */
int ButtonsSwitches_GetGraphicsModeSwitchState()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_6);
 8000858:	2140      	movs	r1, #64	; 0x40
 800085a:	4803      	ldr	r0, [pc, #12]	; (8000868 <ButtonsSwitches_GetGraphicsModeSwitchState+0x14>)
 800085c:	f001 ffee 	bl	800283c <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <ButtonsSwitches_GetLocalZoneID>:

/** Read SW1 and SW2 state*/
uint8_t ButtonsSwitches_GetLocalZoneID()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	// Read the switches: SW1: PE2, SW2: PE4
	uint8_t localZoneIDpin0 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_2);
 8000872:	2104      	movs	r1, #4
 8000874:	480a      	ldr	r0, [pc, #40]	; (80008a0 <ButtonsSwitches_GetLocalZoneID+0x34>)
 8000876:	f001 ffe1 	bl	800283c <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
	uint8_t localZoneIDpin1 = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 800087e:	2110      	movs	r1, #16
 8000880:	4807      	ldr	r0, [pc, #28]	; (80008a0 <ButtonsSwitches_GetLocalZoneID+0x34>)
 8000882:	f001 ffdb 	bl	800283c <HAL_GPIO_ReadPin>
 8000886:	4603      	mov	r3, r0
 8000888:	71bb      	strb	r3, [r7, #6]

	uint8_t localZoneID = localZoneIDpin0 + (localZoneIDpin1<<1);
 800088a:	79bb      	ldrb	r3, [r7, #6]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4413      	add	r3, r2
 8000894:	717b      	strb	r3, [r7, #5]

	return localZoneID;
 8000896:	797b      	ldrb	r3, [r7, #5]
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <CAN_Init>:

/* ----------------- Public functions ------------------------ */

/** Initialization of CAN peripheral */
HAL_StatusTypeDef CAN_Init()
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
	// Allow the "message pending" interrupt for FIFO 0 using the function HAL_CAN_ActivateNotification()


	// Finally print whether CAN_Init was successful to the Log.

	return HAL_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <CAN_SendMessage>:

/** Sending a CAN message */
HAL_StatusTypeDef CAN_SendMessage(uint8_t zoneID, uint8_t newStatus)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	460a      	mov	r2, r1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71bb      	strb	r3, [r7, #6]


	// In case of success, log the successful message sending.


	return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <CAN_Go>:

/** This function is called periodically from the main loop. When status change is detected, it sends the new status to the CAN bus. */
void CAN_Go()
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
	if (hasLocalZoneStatusChanged)
 80008da:	4b12      	ldr	r3, [pc, #72]	; (8000924 <CAN_Go+0x50>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d015      	beq.n	800090e <CAN_Go+0x3a>
	{
		HAL_StatusTypeDef result = CAN_SendMessage(localZoneID, zoneStatus[localZoneID]);
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <CAN_Go+0x54>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <CAN_Go+0x54>)
 80008e8:	7812      	ldrb	r2, [r2, #0]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4a0f      	ldr	r2, [pc, #60]	; (800092c <CAN_Go+0x58>)
 80008ee:	5c52      	ldrb	r2, [r2, r1]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff ffde 	bl	80008b4 <CAN_SendMessage>
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
		if (result != HAL_OK)
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d005      	beq.n	800090e <CAN_Go+0x3a>
		{
			Log_LogStringAndHalStatus("CAN_SendMessage: failed.\n\r", LOGLEVEL_NORMAL, result);
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	461a      	mov	r2, r3
 8000906:	2102      	movs	r1, #2
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <CAN_Go+0x5c>)
 800090a:	f000 fe9f 	bl	800164c <Log_LogStringAndHalStatus>
		}
	}

	if (hasAnyZoneStatusChanged)
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <CAN_Go+0x60>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d002      	beq.n	800091c <CAN_Go+0x48>
	{
		repeated_log_delay = 0;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <CAN_Go+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
	}
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000316 	.word	0x20000316
 8000928:	2000030e 	.word	0x2000030e
 800092c:	20000310 	.word	0x20000310
 8000930:	080050bc 	.word	0x080050bc
 8000934:	20000315 	.word	0x20000315
 8000938:	200002fc 	.word	0x200002fc

0800093c <GLCD_Init>:
void GLCD_MSP_Init(void);

/* ----------------- Public functions  ----------------- */

void GLCD_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	// Default states of GPIOs
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);	// GLCD_RW = 0
 8000940:	2200      	movs	r2, #0
 8000942:	2180      	movs	r1, #128	; 0x80
 8000944:	4817      	ldr	r0, [pc, #92]	; (80009a4 <GLCD_Init+0x68>)
 8000946:	f001 ff91 	bl	800286c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);		// GLCD_E = 1
 800094a:	2201      	movs	r2, #1
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	4816      	ldr	r0, [pc, #88]	; (80009a8 <GLCD_Init+0x6c>)
 8000950:	f001 ff8c 	bl	800286c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);	// GLCD_RESET = 0
 8000954:	2200      	movs	r2, #0
 8000956:	2108      	movs	r1, #8
 8000958:	4813      	ldr	r0, [pc, #76]	; (80009a8 <GLCD_Init+0x6c>)
 800095a:	f001 ff87 	bl	800286c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);	// #GLCDEN = 0
 800095e:	2200      	movs	r2, #0
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <GLCD_Init+0x70>)
 8000964:	f001 ff82 	bl	800286c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		// Backlight = 1 (PWM 100%)
 8000968:	2201      	movs	r2, #1
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	4810      	ldr	r0, [pc, #64]	; (80009b0 <GLCD_Init+0x74>)
 8000970:	f001 ff7c 	bl	800286c <HAL_GPIO_WritePin>

	// Init GLCD functions
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);	// GLCD_E = 0
 8000974:	2200      	movs	r2, #0
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <GLCD_Init+0x6c>)
 800097a:	f001 ff77 	bl	800286c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_SET);	// GLCD_RESET = 1
 800097e:	2201      	movs	r2, #1
 8000980:	2108      	movs	r1, #8
 8000982:	4809      	ldr	r0, [pc, #36]	; (80009a8 <GLCD_Init+0x6c>)
 8000984:	f001 ff72 	bl	800286c <HAL_GPIO_WritePin>

	GLCD_Write(3,0,0x3F); 	//GLCD on
 8000988:	223f      	movs	r2, #63	; 0x3f
 800098a:	2100      	movs	r1, #0
 800098c:	2003      	movs	r0, #3
 800098e:	f000 f811 	bl	80009b4 <GLCD_Write>
	GLCD_Write(3,0,0xC0);	//GLCD Start Line
 8000992:	22c0      	movs	r2, #192	; 0xc0
 8000994:	2100      	movs	r1, #0
 8000996:	2003      	movs	r0, #3
 8000998:	f000 f80c 	bl	80009b4 <GLCD_Write>
	GLCD_Clear();			//Clear display
 800099c:	f000 f880 	bl	8000aa0 <GLCD_Clear>
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020800 	.word	0x40020800

080009b4 <GLCD_Write>:
* General purpose write function for the LCD (8 bits, instruction/data)
* 	cs_s, 1 = CS1, 2 = CS2, 3 = CS1&CS2
* 	d_i, 0 = instruction, 1 = data
*/
void GLCD_Write(char cs_s,char d_i,char g_data)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	71fb      	strb	r3, [r7, #7]
 80009be:	460b      	mov	r3, r1
 80009c0:	71bb      	strb	r3, [r7, #6]
 80009c2:	4613      	mov	r3, r2
 80009c4:	717b      	strb	r3, [r7, #5]
	uint16_t data = 0x0000;
 80009c6:	2300      	movs	r3, #0
 80009c8:	81fb      	strh	r3, [r7, #14]
	switch(cs_s)
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d012      	beq.n	80009f6 <GLCD_Write+0x42>
 80009d0:	2b03      	cmp	r3, #3
 80009d2:	dc1b      	bgt.n	8000a0c <GLCD_Write+0x58>
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d002      	beq.n	80009de <GLCD_Write+0x2a>
 80009d8:	2b02      	cmp	r3, #2
 80009da:	d006      	beq.n	80009ea <GLCD_Write+0x36>
 80009dc:	e016      	b.n	8000a0c <GLCD_Write+0x58>
	{
	case 1:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2110      	movs	r1, #16
 80009e2:	482c      	ldr	r0, [pc, #176]	; (8000a94 <GLCD_Write+0xe0>)
 80009e4:	f001 ff42 	bl	800286c <HAL_GPIO_WritePin>
		break;
 80009e8:	e010      	b.n	8000a0c <GLCD_Write+0x58>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2120      	movs	r1, #32
 80009ee:	4829      	ldr	r0, [pc, #164]	; (8000a94 <GLCD_Write+0xe0>)
 80009f0:	f001 ff3c 	bl	800286c <HAL_GPIO_WritePin>
		break;
 80009f4:	e00a      	b.n	8000a0c <GLCD_Write+0x58>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	2110      	movs	r1, #16
 80009fa:	4826      	ldr	r0, [pc, #152]	; (8000a94 <GLCD_Write+0xe0>)
 80009fc:	f001 ff36 	bl	800286c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000a00:	2201      	movs	r2, #1
 8000a02:	2120      	movs	r1, #32
 8000a04:	4823      	ldr	r0, [pc, #140]	; (8000a94 <GLCD_Write+0xe0>)
 8000a06:	f001 ff31 	bl	800286c <HAL_GPIO_WritePin>
		break;
 8000a0a:	bf00      	nop
	}
	switch(d_i)
 8000a0c:	79bb      	ldrb	r3, [r7, #6]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d002      	beq.n	8000a18 <GLCD_Write+0x64>
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d006      	beq.n	8000a24 <GLCD_Write+0x70>
 8000a16:	e00b      	b.n	8000a30 <GLCD_Write+0x7c>
	{
	case 0:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	481e      	ldr	r0, [pc, #120]	; (8000a98 <GLCD_Write+0xe4>)
 8000a1e:	f001 ff25 	bl	800286c <HAL_GPIO_WritePin>
		break;
 8000a22:	e005      	b.n	8000a30 <GLCD_Write+0x7c>
	case 1:
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2140      	movs	r1, #64	; 0x40
 8000a28:	481b      	ldr	r0, [pc, #108]	; (8000a98 <GLCD_Write+0xe4>)
 8000a2a:	f001 ff1f 	bl	800286c <HAL_GPIO_WritePin>
		break;
 8000a2e:	bf00      	nop
	}

	data = GPIOE->IDR;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <GLCD_Write+0xe8>)
 8000a32:	691b      	ldr	r3, [r3, #16]
 8000a34:	81fb      	strh	r3, [r7, #14]
	data &= 0x00FF;
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	81fb      	strh	r3, [r7, #14]
	data |= g_data << 8;
 8000a3c:	797b      	ldrb	r3, [r7, #5]
 8000a3e:	021b      	lsls	r3, r3, #8
 8000a40:	b21a      	sxth	r2, r3
 8000a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	81fb      	strh	r3, [r7, #14]
	GPIOE->ODR = data;
 8000a4c:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <GLCD_Write+0xe8>)
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	6153      	str	r3, [r2, #20]

	Sys_DelayUs(1);
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 f924 	bl	8000ca0 <Sys_DelayUs>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	480e      	ldr	r0, [pc, #56]	; (8000a98 <GLCD_Write+0xe4>)
 8000a5e:	f001 ff05 	bl	800286c <HAL_GPIO_WritePin>
	Sys_DelayUs(2);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f000 f91c 	bl	8000ca0 <Sys_DelayUs>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <GLCD_Write+0xe4>)
 8000a6e:	f001 fefd 	bl	800286c <HAL_GPIO_WritePin>
	Sys_DelayUs(4);
 8000a72:	2004      	movs	r0, #4
 8000a74:	f000 f914 	bl	8000ca0 <Sys_DelayUs>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2110      	movs	r1, #16
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <GLCD_Write+0xe0>)
 8000a7e:	f001 fef5 	bl	800286c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2120      	movs	r1, #32
 8000a86:	4803      	ldr	r0, [pc, #12]	; (8000a94 <GLCD_Write+0xe0>)
 8000a88:	f001 fef0 	bl	800286c <HAL_GPIO_WritePin>
}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <GLCD_Clear>:

/** Clear the display. */
void GLCD_Clear(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
	char x,y;
	for(x=0;x<8;x++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	71fb      	strb	r3, [r7, #7]
 8000aaa:	e01e      	b.n	8000aea <GLCD_Clear+0x4a>
	{
		GLCD_Write(3,0,0x40);
 8000aac:	2240      	movs	r2, #64	; 0x40
 8000aae:	2100      	movs	r1, #0
 8000ab0:	2003      	movs	r0, #3
 8000ab2:	f7ff ff7f 	bl	80009b4 <GLCD_Write>
		GLCD_Write(3,0,(0xB8|x));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f063 0347 	orn	r3, r3, #71	; 0x47
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	461a      	mov	r2, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f7ff ff76 	bl	80009b4 <GLCD_Write>
		for(y=0;y<64;y++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	71bb      	strb	r3, [r7, #6]
 8000acc:	e007      	b.n	8000ade <GLCD_Clear+0x3e>
		{
			GLCD_Write(3,1,0x00);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	f7ff ff6e 	bl	80009b4 <GLCD_Write>
		for(y=0;y<64;y++)
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	3301      	adds	r3, #1
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ae2:	d9f4      	bls.n	8000ace <GLCD_Clear+0x2e>
	for(x=0;x<8;x++)
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	71fb      	strb	r3, [r7, #7]
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b07      	cmp	r3, #7
 8000aee:	d9dd      	bls.n	8000aac <GLCD_Clear+0xc>
		}
	}
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <GLCD_Write_Block>:
/** Set the value at the intersection of a line and column based on m_data
 * 		m_data: pattern to draw
 * 		cX: row (0-7)
 * 		cY: column (0-127) */
void GLCD_Write_Block(char m_data,char cX,char cY)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b084      	sub	sp, #16
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	71fb      	strb	r3, [r7, #7]
 8000b04:	460b      	mov	r3, r1
 8000b06:	71bb      	strb	r3, [r7, #6]
 8000b08:	4613      	mov	r3, r2
 8000b0a:	717b      	strb	r3, [r7, #5]
	char chip=1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
	if(cY>=64)
 8000b10:	797b      	ldrb	r3, [r7, #5]
 8000b12:	2b3f      	cmp	r3, #63	; 0x3f
 8000b14:	d904      	bls.n	8000b20 <GLCD_Write_Block+0x26>
	{
		chip=2;
 8000b16:	2302      	movs	r3, #2
 8000b18:	73fb      	strb	r3, [r7, #15]
		cY-=64;
 8000b1a:	797b      	ldrb	r3, [r7, #5]
 8000b1c:	3b40      	subs	r3, #64	; 0x40
 8000b1e:	717b      	strb	r3, [r7, #5]
	}
	GLCD_Write(chip,0,(0x40|cY));
 8000b20:	797b      	ldrb	r3, [r7, #5]
 8000b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff ff41 	bl	80009b4 <GLCD_Write>
	GLCD_Write(chip,0,(0xB8|cX));
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	f063 0347 	orn	r3, r3, #71	; 0x47
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff38 	bl	80009b4 <GLCD_Write>
	GLCD_Write(chip,1,m_data);
 8000b44:	79fa      	ldrb	r2, [r7, #7]
 8000b46:	7bfb      	ldrb	r3, [r7, #15]
 8000b48:	2101      	movs	r1, #1
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff32 	bl	80009b4 <GLCD_Write>
}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <GLCD_WriteString>:

/** Write a string to the display. */
void GLCD_WriteString(const char* string,char Y, char X)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
 8000b64:	4613      	mov	r3, r2
 8000b66:	70bb      	strb	r3, [r7, #2]
	char temp = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	72fb      	strb	r3, [r7, #11]
	int i=0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
	while(string[i]!='\0')
 8000b70:	e018      	b.n	8000ba4 <GLCD_WriteString+0x4c>
	{
		temp = string[i];
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	72fb      	strb	r3, [r7, #11]
		GLCD_Write_Char(temp-32,X,Y+6*i);
 8000b7c:	7afb      	ldrb	r3, [r7, #11]
 8000b7e:	3b20      	subs	r3, #32
 8000b80:	b2d8      	uxtb	r0, r3
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	461a      	mov	r2, r3
 8000b88:	0052      	lsls	r2, r2, #1
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	4413      	add	r3, r2
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	78bb      	ldrb	r3, [r7, #2]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	f000 f80f 	bl	8000bbc <GLCD_Write_Char>
		i++;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
	while(string[i]!='\0')
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	4413      	add	r3, r2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1e0      	bne.n	8000b72 <GLCD_WriteString+0x1a>
	}
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <GLCD_Write_Char>:

/** Write a character to the display. */
void GLCD_Write_Char(char cPlace,char cX,char cY)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	71bb      	strb	r3, [r7, #6]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	717b      	strb	r3, [r7, #5]
	char i=0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73fb      	strb	r3, [r7, #15]
	char chip=1;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	73bb      	strb	r3, [r7, #14]
	if(cY>=64)
 8000bd6:	797b      	ldrb	r3, [r7, #5]
 8000bd8:	2b3f      	cmp	r3, #63	; 0x3f
 8000bda:	d904      	bls.n	8000be6 <GLCD_Write_Char+0x2a>
	{
		chip=2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	73bb      	strb	r3, [r7, #14]
		cY-=64;
 8000be0:	797b      	ldrb	r3, [r7, #5]
 8000be2:	3b40      	subs	r3, #64	; 0x40
 8000be4:	717b      	strb	r3, [r7, #5]
	}
	GLCD_Write(chip,0,(0x40|cY));
 8000be6:	797b      	ldrb	r3, [r7, #5]
 8000be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	7bbb      	ldrb	r3, [r7, #14]
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fede 	bl	80009b4 <GLCD_Write>
	GLCD_Write(chip,0,(0xB8|cX));
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	f063 0347 	orn	r3, r3, #71	; 0x47
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff fed5 	bl	80009b4 <GLCD_Write>
	for (i=0;i<5;i++)
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	73fb      	strb	r3, [r7, #15]
 8000c0e:	e02f      	b.n	8000c70 <GLCD_Write_Char+0xb4>
	{
	  if (cY+i >= 64)
 8000c10:	797a      	ldrb	r2, [r7, #5]
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
 8000c14:	4413      	add	r3, r2
 8000c16:	2b3f      	cmp	r3, #63	; 0x3f
 8000c18:	dd1a      	ble.n	8000c50 <GLCD_Write_Char+0x94>
	  {
		  chip=2;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	73bb      	strb	r3, [r7, #14]
		  GLCD_Write(chip,0,(0x40|(cY+i-64)));
 8000c1e:	797a      	ldrb	r2, [r7, #5]
 8000c20:	7bfb      	ldrb	r3, [r7, #15]
 8000c22:	4413      	add	r3, r2
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	3b40      	subs	r3, #64	; 0x40
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c30:	b25b      	sxtb	r3, r3
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	7bbb      	ldrb	r3, [r7, #14]
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff febb 	bl	80009b4 <GLCD_Write>
		  GLCD_Write(chip,0,(0xB8|cX));
 8000c3e:	79bb      	ldrb	r3, [r7, #6]
 8000c40:	f063 0347 	orn	r3, r3, #71	; 0x47
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	7bbb      	ldrb	r3, [r7, #14]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff feb2 	bl	80009b4 <GLCD_Write>
	  }
	  GLCD_Write(chip,1,fontdata[cPlace*5+i]);
 8000c50:	79fa      	ldrb	r2, [r7, #7]
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	441a      	add	r2, r3
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <GLCD_Write_Char+0xc4>)
 8000c5e:	5cd2      	ldrb	r2, [r2, r3]
 8000c60:	7bbb      	ldrb	r3, [r7, #14]
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fea5 	bl	80009b4 <GLCD_Write>
	for (i=0;i<5;i++)
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d9cc      	bls.n	8000c10 <GLCD_Write_Char+0x54>
	}
}
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	20000000 	.word	0x20000000

08000c84 <GlobalFunctions_Init>:

/* ----------------- Public functions ----------------- */

/** Initialization of global functions */
void GlobalFunctions_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8000c88:	f000 f90c 	bl	8000ea4 <MX_GPIO_Init>
	MX_TIM4_Init();
 8000c8c:	f000 ff9a 	bl	8001bc4 <MX_TIM4_Init>

	HAL_TIM_Base_Start_IT(&htim4);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <GlobalFunctions_Init+0x18>)
 8000c92:	f002 faed 	bl	8003270 <HAL_TIM_Base_Start_IT>
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000032c 	.word	0x2000032c

08000ca0 <Sys_DelayUs>:

/** Delay microseconds, blocked */
void Sys_DelayUs(int us)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	sys_delay = us;
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <Sys_DelayUs+0x28>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
	while(sys_delay);
 8000cae:	bf00      	nop
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <Sys_DelayUs+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1fb      	bne.n	8000cb0 <Sys_DelayUs+0x10>
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	200002f8 	.word	0x200002f8

08000ccc <HAL_TIM_PeriodElapsedCallback>:
}

/* ----------------- Interrupt handling and callback functions----------------- */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *handle)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	UNUSED(handle);

	if (sys_delay>0)
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dd04      	ble.n	8000ce6 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		sys_delay--;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ce4:	6013      	str	r3, [r2, #0]
	}

	if (repeated_log_delay>0)
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		repeated_log_delay--;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cf6:	6013      	str	r3, [r2, #0]
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	200002f8 	.word	0x200002f8
 8000d08:	200002fc 	.word	0x200002fc

08000d0c <I2C_Init>:

/* ----------------- Public functions ------------------------ */

/** I2C Initialization. */
HAL_StatusTypeDef I2C_Init()
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
	// After generating the source code, include "i2c.h" header file and call
	// initializer function. The periphery will later be accessed
	// by the handle variable hi2c1. See the header "i2c.h"


	return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <I2C_ReadRegister>:

/** Register read using I2C. */
HAL_StatusTypeDef I2C_ReadRegister(uint16_t deviceAddress, uint8_t registerAddress, uint8_t *pData, uint16_t dataSize)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b087      	sub	sp, #28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60ba      	str	r2, [r7, #8]
 8000d24:	461a      	mov	r2, r3
 8000d26:	4603      	mov	r3, r0
 8000d28:	81fb      	strh	r3, [r7, #14]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	737b      	strb	r3, [r7, #13]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	80fb      	strh	r3, [r7, #6]
	// - pData points to the buffer where data is read
	// - set timeout to i2c_timeout global constant
	// Remove the template code that fills pData with zeros.


	for(int i=0; i<dataSize; i++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e007      	b.n	8000d48 <I2C_ReadRegister+0x2c>
	{
		pData[i]=0;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<dataSize; i++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf3      	blt.n	8000d38 <I2C_ReadRegister+0x1c>
	}
	return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <I2C_WriteRegister>:

/** Write a register over I2C. */
HAL_StatusTypeDef I2C_WriteRegister(uint16_t deviceAddress, uint8_t registerAddress, uint8_t *pData, uint16_t dataSize)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4603      	mov	r3, r0
 8000d6a:	81fb      	strh	r3, [r7, #14]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	737b      	strb	r3, [r7, #13]
 8000d70:	4613      	mov	r3, r2
 8000d72:	80fb      	strh	r3, [r7, #6]
	// TODO: Task 3 - I2C
	// Use HAL_I2C_Mem_Write() similar to the reading
	// The size of the memory address must be specified in bytes (1 byte).

	return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <SPI_Init>:

/* ----------------- Public functions ------------------------ */

/** Initialization of SPI peripheral */
HAL_StatusTypeDef SPI_Init()
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
	//  - SCK line: PA5, MISO line: PA6, MOSI line: PA7
	// Setup the PE3 pin as GPIO output, it will be used as the slave select (NSS) signal by software.
	// After generating the source, include "spi.h" and call the initializer function.


	return HAL_OK;
 8000d86:	2300      	movs	r3, #0
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
	...

08000d94 <Thermometer_Init>:

/* ----------------- Public functions ----------------- */

/** Initialization. */
HAL_StatusTypeDef Thermometer_Init()
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result = I2C_Init();
 8000d9a:	f7ff ffb7 	bl	8000d0c <I2C_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d007      	beq.n	8000db8 <Thermometer_Init+0x24>
	{
		Log_LogStringAndHalStatus("Thermometer_Init(): I2C_Init() unsuccessful.", LOGLEVEL_NORMAL, result);
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	461a      	mov	r2, r3
 8000dac:	2102      	movs	r1, #2
 8000dae:	4810      	ldr	r0, [pc, #64]	; (8000df0 <Thermometer_Init+0x5c>)
 8000db0:	f000 fc4c 	bl	800164c <Log_LogStringAndHalStatus>
		return result;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	e016      	b.n	8000de6 <Thermometer_Init+0x52>
	}

	// Init: write 00 to register 8
	uint8_t data = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	71bb      	strb	r3, [r7, #6]
	result = I2C_WriteRegister(TempAddr, TempConfReg, &data, 1);
 8000dbc:	2330      	movs	r3, #48	; 0x30
 8000dbe:	b298      	uxth	r0, r3
 8000dc0:	2108      	movs	r1, #8
 8000dc2:	1dba      	adds	r2, r7, #6
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	f7ff ffca 	bl	8000d5e <I2C_WriteRegister>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if (result != HAL_OK)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d007      	beq.n	8000de4 <Thermometer_Init+0x50>
	{
		Log_LogStringAndHalStatus("Thermometer_Init(): thermometer initialization unsuccessful.", LOGLEVEL_NORMAL, result);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <Thermometer_Init+0x60>)
 8000ddc:	f000 fc36 	bl	800164c <Log_LogStringAndHalStatus>
		return result;
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	e000      	b.n	8000de6 <Thermometer_Init+0x52>
	}
	return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	080050d8 	.word	0x080050d8
 8000df4:	08005108 	.word	0x08005108

08000df8 <Thermometer_GetTemperature>:

/** I2C thermometer read actual temperature value */
uint8_t Thermometer_GetTemperature()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
	uint8_t temperature = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	71fb      	strb	r3, [r7, #7]

	uint8_t data[2];
	if (I2C_ReadRegister(TempAddr, TempReg, data, 2) != HAL_OK)
 8000e02:	2330      	movs	r3, #48	; 0x30
 8000e04:	b298      	uxth	r0, r3
 8000e06:	2105      	movs	r1, #5
 8000e08:	463a      	mov	r2, r7
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	f7ff ff86 	bl	8000d1c <I2C_ReadRegister>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <Thermometer_GetTemperature+0x22>
	{
		return 0xFF;
 8000e16:	23ff      	movs	r3, #255	; 0xff
 8000e18:	e024      	b.n	8000e64 <Thermometer_GetTemperature+0x6c>
	}

	uint8_t UpperByte = data[0];
 8000e1a:	783b      	ldrb	r3, [r7, #0]
 8000e1c:	71bb      	strb	r3, [r7, #6]
	uint8_t LowerByte = data[1];
 8000e1e:	787b      	ldrb	r3, [r7, #1]
 8000e20:	717b      	strb	r3, [r7, #5]


	// Combine the values read to get celsius
	UpperByte = UpperByte & 0x1F;
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	71bb      	strb	r3, [r7, #6]
	if ((UpperByte & 0x10) == 0x10){	// < 0°C
 8000e2a:	79bb      	ldrb	r3, [r7, #6]
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d00e      	beq.n	8000e52 <Thermometer_GetTemperature+0x5a>
		UpperByte = UpperByte & 0x0F;
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	71bb      	strb	r3, [r7, #6]
		temperature = 256 - (UpperByte*16+LowerByte/16);
 8000e3c:	79bb      	ldrb	r3, [r7, #6]
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	091b      	lsrs	r3, r3, #4
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4413      	add	r3, r2
 8000e4a:	b2db      	uxtb	r3, r3
 8000e4c:	425b      	negs	r3, r3
 8000e4e:	71fb      	strb	r3, [r7, #7]
 8000e50:	e007      	b.n	8000e62 <Thermometer_GetTemperature+0x6a>
	}else{	// > 0°C
		temperature = UpperByte*16+LowerByte/16;
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	797b      	ldrb	r3, [r7, #5]
 8000e5a:	091b      	lsrs	r3, r3, #4
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4413      	add	r3, r2
 8000e60:	71fb      	strb	r3, [r7, #7]
	}
	return temperature;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <UART_Init>:

/* ----------------- Public functions ----------------- */

/** Initialization */
HAL_StatusTypeDef UART_Init()
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	//  - Oversampling: 16
	//  - Enable USART3 global interrupt at the NVIC settings
	// After successful code generation, include the header "usart.h" and call the generated
	// initializer function. Later USART3 periphery can be accessed by the huart3 periphery handle variable. See usart.h

	MX_UART4_Init();
 8000e70:	f000 ff1c 	bl	8001cac <MX_UART4_Init>
	HAL_UART_MspInit(&huart4);
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <UART_Init+0x1c>)
 8000e76:	f000 ff43 	bl	8001d00 <HAL_UART_MspInit>
	HAL_UART_MspDeInit(&huart4);
 8000e7a:	4803      	ldr	r0, [pc, #12]	; (8000e88 <UART_Init+0x1c>)
 8000e7c:	f000 ff90 	bl	8001da0 <HAL_UART_MspDeInit>
	// Use non-blocking mode by calling HAL_UART_Receive_IT().
	// The type of the second argument of HAL_UART_Receive_IT() must be (uint8_t*) 
	// so cast rxBuffer to this type.


	return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000374 	.word	0x20000374

08000e8c <UART_SendString>:

/** Send a string, non-blocking */
HAL_StatusTypeDef UART_SendString(char *str)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	// The type of the second argument of HAL_UART_Transmit_IT() must be (uint8_t*) 
	// so cast txBuffer to this type!



	return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <MX_GPIO_Init>:
        * EXTI
     PD8   ------> USART3_TX
     PD9   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08c      	sub	sp, #48	; 0x30
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4b5b      	ldr	r3, [pc, #364]	; (800102c <MX_GPIO_Init+0x188>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a5a      	ldr	r2, [pc, #360]	; (800102c <MX_GPIO_Init+0x188>)
 8000ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b58      	ldr	r3, [pc, #352]	; (800102c <MX_GPIO_Init+0x188>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed2:	61bb      	str	r3, [r7, #24]
 8000ed4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	4b54      	ldr	r3, [pc, #336]	; (800102c <MX_GPIO_Init+0x188>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a53      	ldr	r2, [pc, #332]	; (800102c <MX_GPIO_Init+0x188>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b51      	ldr	r3, [pc, #324]	; (800102c <MX_GPIO_Init+0x188>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b4d      	ldr	r3, [pc, #308]	; (800102c <MX_GPIO_Init+0x188>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a4c      	ldr	r2, [pc, #304]	; (800102c <MX_GPIO_Init+0x188>)
 8000efc:	f043 0310 	orr.w	r3, r3, #16
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b4a      	ldr	r3, [pc, #296]	; (800102c <MX_GPIO_Init+0x188>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b46      	ldr	r3, [pc, #280]	; (800102c <MX_GPIO_Init+0x188>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a45      	ldr	r2, [pc, #276]	; (800102c <MX_GPIO_Init+0x188>)
 8000f18:	f043 0308 	orr.w	r3, r3, #8
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b43      	ldr	r3, [pc, #268]	; (800102c <MX_GPIO_Init+0x188>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0308 	and.w	r3, r3, #8
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	4b3f      	ldr	r3, [pc, #252]	; (800102c <MX_GPIO_Init+0x188>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <MX_GPIO_Init+0x188>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b3c      	ldr	r3, [pc, #240]	; (800102c <MX_GPIO_Init+0x188>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	4b38      	ldr	r3, [pc, #224]	; (800102c <MX_GPIO_Init+0x188>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a37      	ldr	r2, [pc, #220]	; (800102c <MX_GPIO_Init+0x188>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b35      	ldr	r3, [pc, #212]	; (800102c <MX_GPIO_Init+0x188>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GLCD_RW_Pin|DB0_Pin|DB1_Pin|DB2_Pin
 8000f62:	2200      	movs	r2, #0
 8000f64:	f64f 7180 	movw	r1, #65408	; 0xff80
 8000f68:	4831      	ldr	r0, [pc, #196]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f6a:	f001 fc7f 	bl	800286c <HAL_GPIO_WritePin>
                          |DB3_Pin|DB4_Pin|DB5_Pin|DB6_Pin
                          |DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_PWM_GPIO_Port, BL_PWM_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f74:	482f      	ldr	r0, [pc, #188]	; (8001034 <MX_GPIO_Init+0x190>)
 8000f76:	f001 fc79 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GLCD_RESET_Pin|GLCD_DI_Pin|GLCD_E_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	21c8      	movs	r1, #200	; 0xc8
 8000f7e:	482e      	ldr	r0, [pc, #184]	; (8001038 <MX_GPIO_Init+0x194>)
 8000f80:	f001 fc74 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GLCD_CS1_Pin|GLCD_CS2_Pin|GLCD_EN_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	21b0      	movs	r1, #176	; 0xb0
 8000f88:	482c      	ldr	r0, [pc, #176]	; (800103c <MX_GPIO_Init+0x198>)
 8000f8a:	f001 fc6f 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = GLCD_RW_Pin|DB0_Pin|DB1_Pin|DB2_Pin
 8000f8e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f92:	61fb      	str	r3, [r7, #28]
                          |DB3_Pin|DB4_Pin|DB5_Pin|DB6_Pin
                          |DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	f107 031c 	add.w	r3, r7, #28
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4822      	ldr	r0, [pc, #136]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000fa8:	f001 f9b0 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fbe:	2307      	movs	r3, #7
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	481b      	ldr	r0, [pc, #108]	; (8001038 <MX_GPIO_Init+0x194>)
 8000fca:	f001 f99f 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BL_PWM_Pin;
 8000fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BL_PWM_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <MX_GPIO_Init+0x190>)
 8000fe8:	f001 f990 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = GLCD_RESET_Pin|GLCD_DI_Pin|GLCD_E_Pin;
 8000fec:	23c8      	movs	r3, #200	; 0xc8
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <MX_GPIO_Init+0x194>)
 8001004:	f001 f982 	bl	800230c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GLCD_CS1_Pin|GLCD_CS2_Pin|GLCD_EN_Pin;
 8001008:	23b0      	movs	r3, #176	; 0xb0
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <MX_GPIO_Init+0x198>)
 8001020:	f001 f974 	bl	800230c <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3730      	adds	r7, #48	; 0x30
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40023800 	.word	0x40023800
 8001030:	40021000 	.word	0x40021000
 8001034:	40020800 	.word	0x40020800
 8001038:	40020c00 	.word	0x40020c00
 800103c:	40020400 	.word	0x40020400

08001040 <Graphics_Init>:

/* ----------------- Public functions ----------------- */

/** Init graphics display. */
void Graphics_Init()
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	GLCD_Init();
 8001044:	f7ff fc7a 	bl	800093c <GLCD_Init>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <Graphics_Go>:

/** Loop for the graphics activities, called by the main loop */
void Graphics_Go()
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	// Get actual display mode (details or graphics)
	uint8_t graphicsMode = ButtonsSwitches_GetGraphicsModeSwitchState();
 8001052:	f7ff fbff 	bl	8000854 <ButtonsSwitches_GetGraphicsModeSwitchState>
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]

	if (graphicsMode != prevGraphicsMode)
 800105a:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <Graphics_Go+0x4c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	79fa      	ldrb	r2, [r7, #7]
 8001060:	429a      	cmp	r2, r3
 8001062:	d009      	beq.n	8001078 <Graphics_Go+0x2c>
	{
		// Must redraw
		hasGraphicsModeChanged = 1;
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <Graphics_Go+0x50>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
		prevGraphicsMode = graphicsMode;
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <Graphics_Go+0x4c>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	7013      	strb	r3, [r2, #0]
		// Log
		Log_LogString("GRH: Mode has changed.\n\r",LOGLEVEL_NORMAL);
 8001070:	2102      	movs	r1, #2
 8001072:	480b      	ldr	r0, [pc, #44]	; (80010a0 <Graphics_Go+0x54>)
 8001074:	f000 fad6 	bl	8001624 <Log_LogString>
	}

	if (graphicsMode)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d002      	beq.n	8001084 <Graphics_Go+0x38>
	{
		ShowDetailedGraphics();
 800107e:	f000 f83d 	bl	80010fc <ShowDetailedGraphics>
 8001082:	e001      	b.n	8001088 <Graphics_Go+0x3c>
	}
	else
	{
		ShowDrawingGraphics();
 8001084:	f000 f8f8 	bl	8001278 <ShowDrawingGraphics>
	}

	hasGraphicsModeChanged = 0;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <Graphics_Go+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000216 	.word	0x20000216
 800109c:	20000215 	.word	0x20000215
 80010a0:	08005148 	.word	0x08005148

080010a4 <Send_BackgroundImage>:

/* ----------------- Private functions ----------------- */

/** Draw floorplan. */
void Send_BackgroundImage()
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
	int i,j,k=0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]
	for (i=0;i<8;i++){
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	e019      	b.n	80010e8 <Send_BackgroundImage+0x44>
		for(j=0;j<128;j++){
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	e010      	b.n	80010dc <Send_BackgroundImage+0x38>
			GLCD_Write_Block(zoneMap[k],i,j);
 80010ba:	4a0f      	ldr	r2, [pc, #60]	; (80010f8 <Send_BackgroundImage+0x54>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	b2d1      	uxtb	r1, r2
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fd15 	bl	8000afa <GLCD_Write_Block>
			k++;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3301      	adds	r3, #1
 80010d4:	607b      	str	r3, [r7, #4]
		for(j=0;j<128;j++){
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	3301      	adds	r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	2b7f      	cmp	r3, #127	; 0x7f
 80010e0:	ddeb      	ble.n	80010ba <Send_BackgroundImage+0x16>
	for (i=0;i<8;i++){
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	dde2      	ble.n	80010b4 <Send_BackgroundImage+0x10>
		}
	}
}
 80010ee:	bf00      	nop
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	080054a0 	.word	0x080054a0

080010fc <ShowDetailedGraphics>:

/** Draw details screen. */
void ShowDetailedGraphics()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af02      	add	r7, sp, #8
	// Redraw only if needed...
	if (hasAnyZoneStatusChanged || hasSensorDataChanged || hasGraphicsModeChanged)
 8001102:	4b4c      	ldr	r3, [pc, #304]	; (8001234 <ShowDetailedGraphics+0x138>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d108      	bne.n	800111c <ShowDetailedGraphics+0x20>
 800110a:	4b4b      	ldr	r3, [pc, #300]	; (8001238 <ShowDetailedGraphics+0x13c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d104      	bne.n	800111c <ShowDetailedGraphics+0x20>
 8001112:	4b4a      	ldr	r3, [pc, #296]	; (800123c <ShowDetailedGraphics+0x140>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8088 	beq.w	800122c <ShowDetailedGraphics+0x130>
	{
		if (hasGraphicsModeChanged)
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <ShowDetailedGraphics+0x140>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d047      	beq.n	80011b4 <ShowDetailedGraphics+0xb8>
		{
			GLCD_Clear();
 8001124:	f7ff fcbc 	bl	8000aa0 <GLCD_Clear>
			GLCD_WriteString("Comm lab - BME AUT",0,0);
 8001128:	2200      	movs	r2, #0
 800112a:	2100      	movs	r1, #0
 800112c:	4844      	ldr	r0, [pc, #272]	; (8001240 <ShowDetailedGraphics+0x144>)
 800112e:	f7ff fd13 	bl	8000b58 <GLCD_WriteString>

			sprintf(buffer,"LocalZoneID:%u",localZoneID);
 8001132:	4b44      	ldr	r3, [pc, #272]	; (8001244 <ShowDetailedGraphics+0x148>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	4943      	ldr	r1, [pc, #268]	; (8001248 <ShowDetailedGraphics+0x14c>)
 800113a:	4844      	ldr	r0, [pc, #272]	; (800124c <ShowDetailedGraphics+0x150>)
 800113c:	f003 fb04 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3,2);
 8001140:	2202      	movs	r2, #2
 8001142:	2103      	movs	r1, #3
 8001144:	4841      	ldr	r0, [pc, #260]	; (800124c <ShowDetailedGraphics+0x150>)
 8001146:	f7ff fd07 	bl	8000b58 <GLCD_WriteString>

			sprintf(buffer,"Temp:%d",currentTemperature);
 800114a:	4b41      	ldr	r3, [pc, #260]	; (8001250 <ShowDetailedGraphics+0x154>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	4940      	ldr	r1, [pc, #256]	; (8001254 <ShowDetailedGraphics+0x158>)
 8001152:	483e      	ldr	r0, [pc, #248]	; (800124c <ShowDetailedGraphics+0x150>)
 8001154:	f003 faf8 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3,3);
 8001158:	2203      	movs	r2, #3
 800115a:	2103      	movs	r1, #3
 800115c:	483b      	ldr	r0, [pc, #236]	; (800124c <ShowDetailedGraphics+0x150>)
 800115e:	f7ff fcfb 	bl	8000b58 <GLCD_WriteString>

			sprintf(buffer,"Tilt:%d",currentMaxTilt);
 8001162:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <ShowDetailedGraphics+0x15c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	493c      	ldr	r1, [pc, #240]	; (800125c <ShowDetailedGraphics+0x160>)
 800116a:	4838      	ldr	r0, [pc, #224]	; (800124c <ShowDetailedGraphics+0x150>)
 800116c:	f003 faec 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3,4);
 8001170:	2204      	movs	r2, #4
 8001172:	2103      	movs	r1, #3
 8001174:	4835      	ldr	r0, [pc, #212]	; (800124c <ShowDetailedGraphics+0x150>)
 8001176:	f7ff fcef 	bl	8000b58 <GLCD_WriteString>

			sprintf(buffer,"Zones:%u %u %u %u",
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 800117a:	4b39      	ldr	r3, [pc, #228]	; (8001260 <ShowDetailedGraphics+0x164>)
 800117c:	781b      	ldrb	r3, [r3, #0]
			sprintf(buffer,"Zones:%u %u %u %u",
 800117e:	4619      	mov	r1, r3
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 8001180:	4b37      	ldr	r3, [pc, #220]	; (8001260 <ShowDetailedGraphics+0x164>)
 8001182:	785b      	ldrb	r3, [r3, #1]
			sprintf(buffer,"Zones:%u %u %u %u",
 8001184:	4618      	mov	r0, r3
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 8001186:	4b36      	ldr	r3, [pc, #216]	; (8001260 <ShowDetailedGraphics+0x164>)
 8001188:	789b      	ldrb	r3, [r3, #2]
			sprintf(buffer,"Zones:%u %u %u %u",
 800118a:	461a      	mov	r2, r3
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 800118c:	4b34      	ldr	r3, [pc, #208]	; (8001260 <ShowDetailedGraphics+0x164>)
 800118e:	78db      	ldrb	r3, [r3, #3]
			sprintf(buffer,"Zones:%u %u %u %u",
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	4603      	mov	r3, r0
 8001196:	460a      	mov	r2, r1
 8001198:	4932      	ldr	r1, [pc, #200]	; (8001264 <ShowDetailedGraphics+0x168>)
 800119a:	482c      	ldr	r0, [pc, #176]	; (800124c <ShowDetailedGraphics+0x150>)
 800119c:	f003 fad4 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3,5);
 80011a0:	2205      	movs	r2, #5
 80011a2:	2103      	movs	r1, #3
 80011a4:	4829      	ldr	r0, [pc, #164]	; (800124c <ShowDetailedGraphics+0x150>)
 80011a6:	f7ff fcd7 	bl	8000b58 <GLCD_WriteString>

			// Log
			Log_LogString("GRH: Redraw (details)\n\r",LOGLEVEL_DETAILED);
 80011aa:	2101      	movs	r1, #1
 80011ac:	482e      	ldr	r0, [pc, #184]	; (8001268 <ShowDetailedGraphics+0x16c>)
 80011ae:	f000 fa39 	bl	8001624 <Log_LogString>
			sprintf(buffer,"%u %u %u %u     ",
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
			GLCD_WriteString(buffer,3+6*6,5);
		}
	}
}
 80011b2:	e03b      	b.n	800122c <ShowDetailedGraphics+0x130>
			sprintf(buffer,"%u   ",localZoneID);
 80011b4:	4b23      	ldr	r3, [pc, #140]	; (8001244 <ShowDetailedGraphics+0x148>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	492c      	ldr	r1, [pc, #176]	; (800126c <ShowDetailedGraphics+0x170>)
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <ShowDetailedGraphics+0x150>)
 80011be:	f003 fac3 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3+12*6,2);
 80011c2:	2202      	movs	r2, #2
 80011c4:	214b      	movs	r1, #75	; 0x4b
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <ShowDetailedGraphics+0x150>)
 80011c8:	f7ff fcc6 	bl	8000b58 <GLCD_WriteString>
			sprintf(buffer,"%d   ",currentTemperature);
 80011cc:	4b20      	ldr	r3, [pc, #128]	; (8001250 <ShowDetailedGraphics+0x154>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4927      	ldr	r1, [pc, #156]	; (8001270 <ShowDetailedGraphics+0x174>)
 80011d4:	481d      	ldr	r0, [pc, #116]	; (800124c <ShowDetailedGraphics+0x150>)
 80011d6:	f003 fab7 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3+5*6,3);
 80011da:	2203      	movs	r2, #3
 80011dc:	2121      	movs	r1, #33	; 0x21
 80011de:	481b      	ldr	r0, [pc, #108]	; (800124c <ShowDetailedGraphics+0x150>)
 80011e0:	f7ff fcba 	bl	8000b58 <GLCD_WriteString>
			sprintf(buffer,"%d   ",currentMaxTilt);
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <ShowDetailedGraphics+0x15c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	461a      	mov	r2, r3
 80011ea:	4921      	ldr	r1, [pc, #132]	; (8001270 <ShowDetailedGraphics+0x174>)
 80011ec:	4817      	ldr	r0, [pc, #92]	; (800124c <ShowDetailedGraphics+0x150>)
 80011ee:	f003 faab 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3+5*6,4);
 80011f2:	2204      	movs	r2, #4
 80011f4:	2121      	movs	r1, #33	; 0x21
 80011f6:	4815      	ldr	r0, [pc, #84]	; (800124c <ShowDetailedGraphics+0x150>)
 80011f8:	f7ff fcae 	bl	8000b58 <GLCD_WriteString>
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <ShowDetailedGraphics+0x164>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
			sprintf(buffer,"%u %u %u %u     ",
 8001200:	4619      	mov	r1, r3
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <ShowDetailedGraphics+0x164>)
 8001204:	785b      	ldrb	r3, [r3, #1]
			sprintf(buffer,"%u %u %u %u     ",
 8001206:	4618      	mov	r0, r3
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <ShowDetailedGraphics+0x164>)
 800120a:	789b      	ldrb	r3, [r3, #2]
			sprintf(buffer,"%u %u %u %u     ",
 800120c:	461a      	mov	r2, r3
					zoneStatus[0],zoneStatus[1],zoneStatus[2],zoneStatus[3]);
 800120e:	4b14      	ldr	r3, [pc, #80]	; (8001260 <ShowDetailedGraphics+0x164>)
 8001210:	78db      	ldrb	r3, [r3, #3]
			sprintf(buffer,"%u %u %u %u     ",
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	4603      	mov	r3, r0
 8001218:	460a      	mov	r2, r1
 800121a:	4916      	ldr	r1, [pc, #88]	; (8001274 <ShowDetailedGraphics+0x178>)
 800121c:	480b      	ldr	r0, [pc, #44]	; (800124c <ShowDetailedGraphics+0x150>)
 800121e:	f003 fa93 	bl	8004748 <siprintf>
			GLCD_WriteString(buffer,3+6*6,5);
 8001222:	2205      	movs	r2, #5
 8001224:	2127      	movs	r1, #39	; 0x27
 8001226:	4809      	ldr	r0, [pc, #36]	; (800124c <ShowDetailedGraphics+0x150>)
 8001228:	f7ff fc96 	bl	8000b58 <GLCD_WriteString>
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000315 	.word	0x20000315
 8001238:	20000314 	.word	0x20000314
 800123c:	20000215 	.word	0x20000215
 8001240:	08005164 	.word	0x08005164
 8001244:	2000030e 	.word	0x2000030e
 8001248:	08005178 	.word	0x08005178
 800124c:	200001fc 	.word	0x200001fc
 8001250:	20000304 	.word	0x20000304
 8001254:	08005188 	.word	0x08005188
 8001258:	20000308 	.word	0x20000308
 800125c:	08005190 	.word	0x08005190
 8001260:	20000310 	.word	0x20000310
 8001264:	08005198 	.word	0x08005198
 8001268:	080051ac 	.word	0x080051ac
 800126c:	080051c4 	.word	0x080051c4
 8001270:	080051cc 	.word	0x080051cc
 8001274:	080051d4 	.word	0x080051d4

08001278 <ShowDrawingGraphics>:

/** Draw floorplan screen, if needed. */
void ShowDrawingGraphics()
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
	unsigned char zoneBaseCol[] = {5, 34, 70, 85};
 800127e:	4b35      	ldr	r3, [pc, #212]	; (8001354 <ShowDrawingGraphics+0xdc>)
 8001280:	613b      	str	r3, [r7, #16]
	unsigned char zoneBaseRow[] = {5, 2, 2, 5};
 8001282:	4b35      	ldr	r3, [pc, #212]	; (8001358 <ShowDrawingGraphics+0xe0>)
 8001284:	60fb      	str	r3, [r7, #12]
	int zoneID = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
	char zoneString[5];	// enough memory for 4 chars + closing 0
	if (hasGraphicsModeChanged)
 800128a:	4b34      	ldr	r3, [pc, #208]	; (800135c <ShowDrawingGraphics+0xe4>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <ShowDrawingGraphics+0x2a>
	{
		GLCD_Clear();
 8001292:	f7ff fc05 	bl	8000aa0 <GLCD_Clear>
		Send_BackgroundImage();
 8001296:	f7ff ff05 	bl	80010a4 <Send_BackgroundImage>
		Log_LogString("GRH: Zonemap redrawn\n\r",LOGLEVEL_DETAILED);
 800129a:	2101      	movs	r1, #1
 800129c:	4830      	ldr	r0, [pc, #192]	; (8001360 <ShowDrawingGraphics+0xe8>)
 800129e:	f000 f9c1 	bl	8001624 <Log_LogString>
	}
	if (hasAnyZoneStatusChanged || hasGraphicsModeChanged)
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <ShowDrawingGraphics+0xec>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <ShowDrawingGraphics+0x3a>
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <ShowDrawingGraphics+0xe4>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d04c      	beq.n	800134c <ShowDrawingGraphics+0xd4>
	{
		for(zoneID=0; zoneID<4; zoneID++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	e042      	b.n	800133e <ShowDrawingGraphics+0xc6>
		{
			zoneString[0] = (zoneStatus[zoneID] & ALARM_FIRE) ? 98+32 : ' ';	// 98: fire char
 80012b8:	4a2b      	ldr	r2, [pc, #172]	; (8001368 <ShowDrawingGraphics+0xf0>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <ShowDrawingGraphics+0x54>
 80012c8:	2382      	movs	r3, #130	; 0x82
 80012ca:	e000      	b.n	80012ce <ShowDrawingGraphics+0x56>
 80012cc:	2320      	movs	r3, #32
 80012ce:	713b      	strb	r3, [r7, #4]
			zoneString[1] = (zoneStatus[zoneID] & ALARM_STEALTH) ? 99+32 : ' ';	// 99: person char
 80012d0:	4a25      	ldr	r2, [pc, #148]	; (8001368 <ShowDrawingGraphics+0xf0>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	4413      	add	r3, r2
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <ShowDrawingGraphics+0x6c>
 80012e0:	2383      	movs	r3, #131	; 0x83
 80012e2:	e000      	b.n	80012e6 <ShowDrawingGraphics+0x6e>
 80012e4:	2320      	movs	r3, #32
 80012e6:	717b      	strb	r3, [r7, #5]
			zoneString[2] = (zoneStatus[zoneID] & ALARM_TEST) ? 'T' : ' ';	// 99: T char
 80012e8:	4a1f      	ldr	r2, [pc, #124]	; (8001368 <ShowDrawingGraphics+0xf0>)
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4413      	add	r3, r2
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	f003 0304 	and.w	r3, r3, #4
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <ShowDrawingGraphics+0x84>
 80012f8:	2354      	movs	r3, #84	; 0x54
 80012fa:	e000      	b.n	80012fe <ShowDrawingGraphics+0x86>
 80012fc:	2320      	movs	r3, #32
 80012fe:	71bb      	strb	r3, [r7, #6]
			zoneString[3] = (zoneStatus[zoneID] & ALARM_TEST_UART) ? 'V' : ' ';	// 99: V char
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <ShowDrawingGraphics+0xf0>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	4413      	add	r3, r2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <ShowDrawingGraphics+0x9c>
 8001310:	2356      	movs	r3, #86	; 0x56
 8001312:	e000      	b.n	8001316 <ShowDrawingGraphics+0x9e>
 8001314:	2320      	movs	r3, #32
 8001316:	71fb      	strb	r3, [r7, #7]
			zoneString[4] = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	723b      	strb	r3, [r7, #8]
			GLCD_WriteString(zoneString,zoneBaseCol[zoneID],zoneBaseRow[zoneID]);
 800131c:	f107 0210 	add.w	r2, r7, #16
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	4413      	add	r3, r2
 8001324:	7819      	ldrb	r1, [r3, #0]
 8001326:	f107 020c 	add.w	r2, r7, #12
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fc10 	bl	8000b58 <GLCD_WriteString>
		for(zoneID=0; zoneID<4; zoneID++)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	2b03      	cmp	r3, #3
 8001342:	ddb9      	ble.n	80012b8 <ShowDrawingGraphics+0x40>
		}
		Log_LogString("GRH: Redrawn (drawing)\n\r",LOGLEVEL_DETAILED);
 8001344:	2101      	movs	r1, #1
 8001346:	4809      	ldr	r0, [pc, #36]	; (800136c <ShowDrawingGraphics+0xf4>)
 8001348:	f000 f96c 	bl	8001624 <Log_LogString>
	}
}
 800134c:	bf00      	nop
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	55462205 	.word	0x55462205
 8001358:	05020205 	.word	0x05020205
 800135c:	20000215 	.word	0x20000215
 8001360:	080051e8 	.word	0x080051e8
 8001364:	20000315 	.word	0x20000315
 8001368:	20000310 	.word	0x20000310
 800136c:	08005200 	.word	0x08005200

08001370 <LocalSensorProcessing_Init>:

/* ----------------- Public functions ----------------- */

/** Sensor initialization. */
void LocalSensorProcessing_Init()
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b09a      	sub	sp, #104	; 0x68
 8001374:	af00      	add	r7, sp, #0
	Thermometer_Init();
 8001376:	f7ff fd0d 	bl	8000d94 <Thermometer_Init>
	Accelerometer_Init();
 800137a:	f7ff f8fb 	bl	8000574 <Accelerometer_Init>

	char buffer[100];
	// Set reference temperature at startup, the alarm will be based on this value
	// Get temperature data, set referenceTemperature
	referenceTemperature = Thermometer_GetTemperature();
 800137e:	f7ff fd3b 	bl	8000df8 <Thermometer_GetTemperature>
 8001382:	4603      	mov	r3, r0
 8001384:	461a      	mov	r2, r3
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <LocalSensorProcessing_Init+0x48>)
 8001388:	601a      	str	r2, [r3, #0]
	snprintf(buffer,100,"Temperature reference: %d\n\r",referenceTemperature);
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <LocalSensorProcessing_Init+0x48>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	1d38      	adds	r0, r7, #4
 8001390:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LocalSensorProcessing_Init+0x4c>)
 8001392:	2164      	movs	r1, #100	; 0x64
 8001394:	f003 f9a4 	bl	80046e0 <sniprintf>
	Log_LogString(buffer,LOGLEVEL_NORMAL);
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f000 f941 	bl	8001624 <Log_LogString>

	// Get local zone ID
	localZoneID = ButtonsSwitches_GetLocalZoneID();
 80013a2:	f7ff fa63 	bl	800086c <ButtonsSwitches_GetLocalZoneID>
 80013a6:	4603      	mov	r3, r0
 80013a8:	461a      	mov	r2, r3
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <LocalSensorProcessing_Init+0x50>)
 80013ac:	701a      	strb	r2, [r3, #0]

}
 80013ae:	bf00      	nop
 80013b0:	3768      	adds	r7, #104	; 0x68
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000300 	.word	0x20000300
 80013bc:	0800521c 	.word	0x0800521c
 80013c0:	2000030e 	.word	0x2000030e

080013c4 <LocalSensorProcessing_Go>:

/** Processing all local sensors, one iteration, called by the main loop*/
void LocalSensorProcessing_Go()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b09a      	sub	sp, #104	; 0x68
 80013c8:	af00      	add	r7, sp, #0
	// Refresh sensor readings
	collectSensorData();
 80013ca:	f000 f88f 	bl	80014ec <collectSensorData>

	// Has any of the reading changed? If yes, LCD must be updated
	if ((currentTemperature != prevTemp) || (currentMaxTilt != prevMaxTilt) || (TestSwitchState != prevTestSwitchState))
 80013ce:	4b39      	ldr	r3, [pc, #228]	; (80014b4 <LocalSensorProcessing_Go+0xf0>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <LocalSensorProcessing_Go+0xf4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d10b      	bne.n	80013f2 <LocalSensorProcessing_Go+0x2e>
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <LocalSensorProcessing_Go+0xf8>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <LocalSensorProcessing_Go+0xfc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d105      	bne.n	80013f2 <LocalSensorProcessing_Go+0x2e>
 80013e6:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <LocalSensorProcessing_Go+0x100>)
 80013e8:	781a      	ldrb	r2, [r3, #0]
 80013ea:	4b37      	ldr	r3, [pc, #220]	; (80014c8 <LocalSensorProcessing_Go+0x104>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d002      	beq.n	80013f8 <LocalSensorProcessing_Go+0x34>
	{
		hasSensorDataChanged=1;
 80013f2:	4b36      	ldr	r3, [pc, #216]	; (80014cc <LocalSensorProcessing_Go+0x108>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	701a      	strb	r2, [r3, #0]
	}
	prevTemp = currentTemperature;
 80013f8:	4b2e      	ldr	r3, [pc, #184]	; (80014b4 <LocalSensorProcessing_Go+0xf0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a2e      	ldr	r2, [pc, #184]	; (80014b8 <LocalSensorProcessing_Go+0xf4>)
 80013fe:	6013      	str	r3, [r2, #0]
	prevMaxTilt = currentMaxTilt;
 8001400:	4b2e      	ldr	r3, [pc, #184]	; (80014bc <LocalSensorProcessing_Go+0xf8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a2e      	ldr	r2, [pc, #184]	; (80014c0 <LocalSensorProcessing_Go+0xfc>)
 8001406:	6013      	str	r3, [r2, #0]
	prevTestSwitchState = TestSwitchState;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <LocalSensorProcessing_Go+0x100>)
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	4b2e      	ldr	r3, [pc, #184]	; (80014c8 <LocalSensorProcessing_Go+0x104>)
 800140e:	701a      	strb	r2, [r3, #0]

	// Save zone state to previous
	uint8_t prevZoneStatus = zoneStatus[localZoneID];
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <LocalSensorProcessing_Go+0x10c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <LocalSensorProcessing_Go+0x110>)
 8001418:	5c9b      	ldrb	r3, [r3, r2]
 800141a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	// Check for alerts
	SetLocalZoneStatus(ALARM_FIRE, currentTemperature >= referenceTemperature+2);
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <LocalSensorProcessing_Go+0x114>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	4b23      	ldr	r3, [pc, #140]	; (80014b4 <LocalSensorProcessing_Go+0xf0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	bfb4      	ite	lt
 800142c:	2301      	movlt	r3, #1
 800142e:	2300      	movge	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	2001      	movs	r0, #1
 8001436:	f000 f8bf 	bl	80015b8 <SetLocalZoneStatus>
	SetLocalZoneStatus(ALARM_STEALTH, currentMaxTilt > 5);
 800143a:	4b20      	ldr	r3, [pc, #128]	; (80014bc <LocalSensorProcessing_Go+0xf8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2b05      	cmp	r3, #5
 8001440:	bfcc      	ite	gt
 8001442:	2301      	movgt	r3, #1
 8001444:	2300      	movle	r3, #0
 8001446:	b2db      	uxtb	r3, r3
 8001448:	4619      	mov	r1, r3
 800144a:	2002      	movs	r0, #2
 800144c:	f000 f8b4 	bl	80015b8 <SetLocalZoneStatus>
	SetLocalZoneStatus(ALARM_TEST, TestSwitchState);
 8001450:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <LocalSensorProcessing_Go+0x100>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	2004      	movs	r0, #4
 8001458:	f000 f8ae 	bl	80015b8 <SetLocalZoneStatus>
	SetLocalZoneStatus(ALARM_TEST_UART, virtualTestSwitchState);
 800145c:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <LocalSensorProcessing_Go+0x118>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	2008      	movs	r0, #8
 8001464:	f000 f8a8 	bl	80015b8 <SetLocalZoneStatus>

	// if a status has changed, send over CAN network
	if (prevZoneStatus != zoneStatus[localZoneID])
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <LocalSensorProcessing_Go+0x10c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	461a      	mov	r2, r3
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <LocalSensorProcessing_Go+0x110>)
 8001470:	5c9b      	ldrb	r3, [r3, r2]
 8001472:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001476:	429a      	cmp	r2, r3
 8001478:	d017      	beq.n	80014aa <LocalSensorProcessing_Go+0xe6>
	{
		hasLocalZoneStatusChanged=1;
 800147a:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <LocalSensorProcessing_Go+0x11c>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
		hasAnyZoneStatusChanged=1;
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <LocalSensorProcessing_Go+0x120>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
		// logging
		char buffer[100];
		sprintf(buffer,"Local zone (%u) state: %u\n\r",localZoneID, zoneStatus[localZoneID]);
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <LocalSensorProcessing_Go+0x10c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	4619      	mov	r1, r3
 800148c:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <LocalSensorProcessing_Go+0x10c>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <LocalSensorProcessing_Go+0x110>)
 8001494:	5c9b      	ldrb	r3, [r3, r2]
 8001496:	4638      	mov	r0, r7
 8001498:	460a      	mov	r2, r1
 800149a:	4913      	ldr	r1, [pc, #76]	; (80014e8 <LocalSensorProcessing_Go+0x124>)
 800149c:	f003 f954 	bl	8004748 <siprintf>
		Log_LogString(buffer,LOGLEVEL_NORMAL);
 80014a0:	463b      	mov	r3, r7
 80014a2:	2102      	movs	r1, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f8bd 	bl	8001624 <Log_LogString>
	}
}
 80014aa:	bf00      	nop
 80014ac:	3768      	adds	r7, #104	; 0x68
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000304 	.word	0x20000304
 80014b8:	20000318 	.word	0x20000318
 80014bc:	20000308 	.word	0x20000308
 80014c0:	2000031c 	.word	0x2000031c
 80014c4:	2000030c 	.word	0x2000030c
 80014c8:	20000320 	.word	0x20000320
 80014cc:	20000314 	.word	0x20000314
 80014d0:	2000030e 	.word	0x2000030e
 80014d4:	20000310 	.word	0x20000310
 80014d8:	20000300 	.word	0x20000300
 80014dc:	2000030d 	.word	0x2000030d
 80014e0:	20000316 	.word	0x20000316
 80014e4:	20000315 	.word	0x20000315
 80014e8:	08005238 	.word	0x08005238

080014ec <collectSensorData>:

/* ----------------- Private functions ----------------- */

/** Collect sensor readings and save to global variables. */
void collectSensorData()
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09a      	sub	sp, #104	; 0x68
 80014f0:	af00      	add	r7, sp, #0
	currentTemperature = Thermometer_GetTemperature();
 80014f2:	f7ff fc81 	bl	8000df8 <Thermometer_GetTemperature>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <collectSensorData+0xb4>)
 80014fc:	601a      	str	r2, [r3, #0]

	char buffer[100];
	snprintf(buffer,100,"Actual temperature: %u\n\r",currentTemperature);
 80014fe:	4b28      	ldr	r3, [pc, #160]	; (80015a0 <collectSensorData+0xb4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	1d38      	adds	r0, r7, #4
 8001504:	4a27      	ldr	r2, [pc, #156]	; (80015a4 <collectSensorData+0xb8>)
 8001506:	2164      	movs	r1, #100	; 0x64
 8001508:	f003 f8ea 	bl	80046e0 <sniprintf>
	Log_LogString(buffer,LOGLEVEL_DETAILED);
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2101      	movs	r1, #1
 8001510:	4618      	mov	r0, r3
 8001512:	f000 f887 	bl	8001624 <Log_LogString>

	// Read MEMS data, update CurrentMaxTilt
	int8_t x,y,z;
	Accelerometer_GetTilt(&x, &y, &z);
 8001516:	1c7a      	adds	r2, r7, #1
 8001518:	1cb9      	adds	r1, r7, #2
 800151a:	1cfb      	adds	r3, r7, #3
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f861 	bl	80005e4 <Accelerometer_GetTilt>
	x = x>=0 ? x : -x;
 8001522:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001526:	2b00      	cmp	r3, #0
 8001528:	bfb8      	it	lt
 800152a:	425b      	neglt	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	b25b      	sxtb	r3, r3
 8001530:	70fb      	strb	r3, [r7, #3]
	y = y>=0 ? y : -y;
 8001532:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	b2db      	uxtb	r3, r3
 800153e:	b25b      	sxtb	r3, r3
 8001540:	70bb      	strb	r3, [r7, #2]
	currentMaxTilt = x>y ? x : y;
 8001542:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8001546:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154a:	4293      	cmp	r3, r2
 800154c:	bfb8      	it	lt
 800154e:	4613      	movlt	r3, r2
 8001550:	b25b      	sxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <collectSensorData+0xbc>)
 8001556:	601a      	str	r2, [r3, #0]

	sprintf(buffer,"Actual tilt: %u\n\r",currentMaxTilt);
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <collectSensorData+0xbc>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4913      	ldr	r1, [pc, #76]	; (80015ac <collectSensorData+0xc0>)
 8001560:	4618      	mov	r0, r3
 8001562:	f003 f8f1 	bl	8004748 <siprintf>
	Log_LogString(buffer,LOGLEVEL_DETAILED);
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	2101      	movs	r1, #1
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f85a 	bl	8001624 <Log_LogString>

	TestSwitchState = ButtonsSwitches_GetTestSwitchState();
 8001570:	f7ff f964 	bl	800083c <ButtonsSwitches_GetTestSwitchState>
 8001574:	4603      	mov	r3, r0
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <collectSensorData+0xc4>)
 800157a:	701a      	strb	r2, [r3, #0]
	sprintf(buffer,"Actual test switch state: %u\n\r", TestSwitchState);
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <collectSensorData+0xc4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	461a      	mov	r2, r3
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	490b      	ldr	r1, [pc, #44]	; (80015b4 <collectSensorData+0xc8>)
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f8de 	bl	8004748 <siprintf>
	Log_LogString(buffer,LOGLEVEL_DETAILED);
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2101      	movs	r1, #1
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f847 	bl	8001624 <Log_LogString>
}
 8001596:	bf00      	nop
 8001598:	3768      	adds	r7, #104	; 0x68
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000304 	.word	0x20000304
 80015a4:	08005254 	.word	0x08005254
 80015a8:	20000308 	.word	0x20000308
 80015ac:	08005270 	.word	0x08005270
 80015b0:	2000030c 	.word	0x2000030c
 80015b4:	08005284 	.word	0x08005284

080015b8 <SetLocalZoneStatus>:

/** Set local alarm states */
void SetLocalZoneStatus(unsigned int alarmType, unsigned char status)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	70fb      	strb	r3, [r7, #3]
	if (status)
 80015c4:	78fb      	ldrb	r3, [r7, #3]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00d      	beq.n	80015e6 <SetLocalZoneStatus+0x2e>
	{
		zoneStatus[localZoneID] |= alarmType;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <SetLocalZoneStatus+0x58>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b10      	ldr	r3, [pc, #64]	; (8001614 <SetLocalZoneStatus+0x5c>)
 80015d2:	5c9a      	ldrb	r2, [r3, r2]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	490d      	ldr	r1, [pc, #52]	; (8001610 <SetLocalZoneStatus+0x58>)
 80015da:	7809      	ldrb	r1, [r1, #0]
 80015dc:	4313      	orrs	r3, r2
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <SetLocalZoneStatus+0x5c>)
 80015e2:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		zoneStatus[localZoneID] &= ~alarmType;
	}
}
 80015e4:	e00e      	b.n	8001604 <SetLocalZoneStatus+0x4c>
		zoneStatus[localZoneID] &= ~alarmType;
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <SetLocalZoneStatus+0x58>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <SetLocalZoneStatus+0x5c>)
 80015ee:	5c9a      	ldrb	r2, [r3, r2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4905      	ldr	r1, [pc, #20]	; (8001610 <SetLocalZoneStatus+0x58>)
 80015fa:	7809      	ldrb	r1, [r1, #0]
 80015fc:	4013      	ands	r3, r2
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SetLocalZoneStatus+0x5c>)
 8001602:	545a      	strb	r2, [r3, r1]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	2000030e 	.word	0x2000030e
 8001614:	20000310 	.word	0x20000310

08001618 <Log_Init>:

/* ----------------- Public functions ----------------- */

/** Initialize. */
void Log_Init()
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
	UART_Init();
 800161c:	f7ff fc26 	bl	8000e6c <UART_Init>
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <Log_LogString>:

/** Write string to the log. */
void Log_LogString(char *text, unsigned int logLevel)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	// If the log level is higher or equal, send over UART
	if (logLevel>=currentLogLevel)
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <Log_LogString+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d302      	bcc.n	800163e <Log_LogString+0x1a>
	{
		UART_SendString(text);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fc27 	bl	8000e8c <UART_SendString>
	}
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000218 	.word	0x20000218

0800164c <Log_LogStringAndHalStatus>:

/** Write a string and HAL Status with a given log level */
void Log_LogStringAndHalStatus(char *text, unsigned int logLevel, HAL_StatusTypeDef status)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0c6      	sub	sp, #280	; 0x118
 8001650:	af00      	add	r7, sp, #0
 8001652:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001656:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800165a:	6018      	str	r0, [r3, #0]
 800165c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001660:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001664:	6019      	str	r1, [r3, #0]
 8001666:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800166a:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800166e:	701a      	strb	r2, [r3, #0]
	char *statusString =
			(status==HAL_OK) ? "OK" :
 8001670:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001674:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01c      	beq.n	80016b8 <Log_LogStringAndHalStatus+0x6c>
			(status==HAL_ERROR ? "ERROR" :
 800167e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001682:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d013      	beq.n	80016b4 <Log_LogStringAndHalStatus+0x68>
			(status==HAL_BUSY ? "BUSY" :
 800168c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001690:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d00a      	beq.n	80016b0 <Log_LogStringAndHalStatus+0x64>
			(status==HAL_TIMEOUT ? "TIMEOUT" : "UNKNOWN")));
 800169a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800169e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b03      	cmp	r3, #3
 80016a6:	d101      	bne.n	80016ac <Log_LogStringAndHalStatus+0x60>
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <Log_LogStringAndHalStatus+0xb0>)
 80016aa:	e006      	b.n	80016ba <Log_LogStringAndHalStatus+0x6e>
 80016ac:	4b14      	ldr	r3, [pc, #80]	; (8001700 <Log_LogStringAndHalStatus+0xb4>)
 80016ae:	e004      	b.n	80016ba <Log_LogStringAndHalStatus+0x6e>
			(status==HAL_BUSY ? "BUSY" :
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <Log_LogStringAndHalStatus+0xb8>)
 80016b2:	e002      	b.n	80016ba <Log_LogStringAndHalStatus+0x6e>
			(status==HAL_ERROR ? "ERROR" :
 80016b4:	4b14      	ldr	r3, [pc, #80]	; (8001708 <Log_LogStringAndHalStatus+0xbc>)
 80016b6:	e000      	b.n	80016ba <Log_LogStringAndHalStatus+0x6e>
			(status==HAL_OK) ? "OK" :
 80016b8:	4b14      	ldr	r3, [pc, #80]	; (800170c <Log_LogStringAndHalStatus+0xc0>)
	char *statusString =
 80016ba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	if (logLevel>=currentLogLevel)
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <Log_LogStringAndHalStatus+0xc4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80016c6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80016ca:	6812      	ldr	r2, [r2, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d310      	bcc.n	80016f2 <Log_LogStringAndHalStatus+0xa6>
	{
		char buffer[255];
		sprintf(buffer, "%s (%s)\n\r", text, statusString);
 80016d0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016d4:	f5a3 7286 	sub.w	r2, r3, #268	; 0x10c
 80016d8:	f107 0014 	add.w	r0, r7, #20
 80016dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	490c      	ldr	r1, [pc, #48]	; (8001714 <Log_LogStringAndHalStatus+0xc8>)
 80016e4:	f003 f830 	bl	8004748 <siprintf>
		UART_SendString(buffer);
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fbcd 	bl	8000e8c <UART_SendString>
	}
}
 80016f2:	bf00      	nop
 80016f4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	080052a4 	.word	0x080052a4
 8001700:	080052ac 	.word	0x080052ac
 8001704:	080052b4 	.word	0x080052b4
 8001708:	080052bc 	.word	0x080052bc
 800170c:	080052c4 	.word	0x080052c4
 8001710:	20000218 	.word	0x20000218
 8001714:	080052c8 	.word	0x080052c8

08001718 <Log_RepeatZoneData>:

/** Regular display of detailed measurement data in the log */
void Log_RepeatZoneData()
{
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	b087      	sub	sp, #28
 800171c:	af06      	add	r7, sp, #24
	if (repeatZoneDataEnabled && repeated_log_delay == 0)
 800171e:	4b4f      	ldr	r3, [pc, #316]	; (800185c <Log_RepeatZoneData+0x144>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f000 8095 	beq.w	8001852 <Log_RepeatZoneData+0x13a>
 8001728:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <Log_RepeatZoneData+0x148>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 8090 	bne.w	8001852 <Log_RepeatZoneData+0x13a>
	{
		switch(localZoneID)
 8001732:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <Log_RepeatZoneData+0x14c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b03      	cmp	r3, #3
 8001738:	f200 8084 	bhi.w	8001844 <Log_RepeatZoneData+0x12c>
 800173c:	a201      	add	r2, pc, #4	; (adr r2, 8001744 <Log_RepeatZoneData+0x2c>)
 800173e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001742:	bf00      	nop
 8001744:	08001755 	.word	0x08001755
 8001748:	08001791 	.word	0x08001791
 800174c:	080017cd 	.word	0x080017cd
 8001750:	08001809 	.word	0x08001809
		{
		case 0:
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: (%u) %u %u %u <<<\n\r",
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <Log_RepeatZoneData+0x14c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461e      	mov	r6, r3
 800175a:	4b43      	ldr	r3, [pc, #268]	; (8001868 <Log_RepeatZoneData+0x150>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b43      	ldr	r3, [pc, #268]	; (800186c <Log_RepeatZoneData+0x154>)
 8001760:	681b      	ldr	r3, [r3, #0]
					localZoneID, currentTemperature, currentMaxTilt,
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 8001762:	4943      	ldr	r1, [pc, #268]	; (8001870 <Log_RepeatZoneData+0x158>)
 8001764:	7809      	ldrb	r1, [r1, #0]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: (%u) %u %u %u <<<\n\r",
 8001766:	4608      	mov	r0, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 8001768:	4941      	ldr	r1, [pc, #260]	; (8001870 <Log_RepeatZoneData+0x158>)
 800176a:	7849      	ldrb	r1, [r1, #1]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: (%u) %u %u %u <<<\n\r",
 800176c:	460c      	mov	r4, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 800176e:	4940      	ldr	r1, [pc, #256]	; (8001870 <Log_RepeatZoneData+0x158>)
 8001770:	7889      	ldrb	r1, [r1, #2]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: (%u) %u %u %u <<<\n\r",
 8001772:	460d      	mov	r5, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 8001774:	493e      	ldr	r1, [pc, #248]	; (8001870 <Log_RepeatZoneData+0x158>)
 8001776:	78c9      	ldrb	r1, [r1, #3]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: (%u) %u %u %u <<<\n\r",
 8001778:	9104      	str	r1, [sp, #16]
 800177a:	9503      	str	r5, [sp, #12]
 800177c:	9402      	str	r4, [sp, #8]
 800177e:	9001      	str	r0, [sp, #4]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	4632      	mov	r2, r6
 8001786:	493b      	ldr	r1, [pc, #236]	; (8001874 <Log_RepeatZoneData+0x15c>)
 8001788:	483b      	ldr	r0, [pc, #236]	; (8001878 <Log_RepeatZoneData+0x160>)
 800178a:	f002 ffdd 	bl	8004748 <siprintf>
			break;
 800178e:	e059      	b.n	8001844 <Log_RepeatZoneData+0x12c>
		case 1:
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u (%u) %u %u <<<\n\r",
 8001790:	4b34      	ldr	r3, [pc, #208]	; (8001864 <Log_RepeatZoneData+0x14c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461e      	mov	r6, r3
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <Log_RepeatZoneData+0x150>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b34      	ldr	r3, [pc, #208]	; (800186c <Log_RepeatZoneData+0x154>)
 800179c:	681b      	ldr	r3, [r3, #0]
					localZoneID, currentTemperature, currentMaxTilt,
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 800179e:	4934      	ldr	r1, [pc, #208]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017a0:	7809      	ldrb	r1, [r1, #0]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u (%u) %u %u <<<\n\r",
 80017a2:	4608      	mov	r0, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017a4:	4932      	ldr	r1, [pc, #200]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017a6:	7849      	ldrb	r1, [r1, #1]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u (%u) %u %u <<<\n\r",
 80017a8:	460c      	mov	r4, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017aa:	4931      	ldr	r1, [pc, #196]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017ac:	7889      	ldrb	r1, [r1, #2]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u (%u) %u %u <<<\n\r",
 80017ae:	460d      	mov	r5, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017b0:	492f      	ldr	r1, [pc, #188]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017b2:	78c9      	ldrb	r1, [r1, #3]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u (%u) %u %u <<<\n\r",
 80017b4:	9104      	str	r1, [sp, #16]
 80017b6:	9503      	str	r5, [sp, #12]
 80017b8:	9402      	str	r4, [sp, #8]
 80017ba:	9001      	str	r0, [sp, #4]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	4632      	mov	r2, r6
 80017c2:	492e      	ldr	r1, [pc, #184]	; (800187c <Log_RepeatZoneData+0x164>)
 80017c4:	482c      	ldr	r0, [pc, #176]	; (8001878 <Log_RepeatZoneData+0x160>)
 80017c6:	f002 ffbf 	bl	8004748 <siprintf>
			break;
 80017ca:	e03b      	b.n	8001844 <Log_RepeatZoneData+0x12c>
		case 2:
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u (%u) %u <<<\n\r",
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <Log_RepeatZoneData+0x14c>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461e      	mov	r6, r3
 80017d2:	4b25      	ldr	r3, [pc, #148]	; (8001868 <Log_RepeatZoneData+0x150>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b25      	ldr	r3, [pc, #148]	; (800186c <Log_RepeatZoneData+0x154>)
 80017d8:	681b      	ldr	r3, [r3, #0]
					localZoneID, currentTemperature, currentMaxTilt,
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017da:	4925      	ldr	r1, [pc, #148]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017dc:	7809      	ldrb	r1, [r1, #0]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u (%u) %u <<<\n\r",
 80017de:	4608      	mov	r0, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017e0:	4923      	ldr	r1, [pc, #140]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017e2:	7849      	ldrb	r1, [r1, #1]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u (%u) %u <<<\n\r",
 80017e4:	460c      	mov	r4, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017e6:	4922      	ldr	r1, [pc, #136]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017e8:	7889      	ldrb	r1, [r1, #2]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u (%u) %u <<<\n\r",
 80017ea:	460d      	mov	r5, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 80017ec:	4920      	ldr	r1, [pc, #128]	; (8001870 <Log_RepeatZoneData+0x158>)
 80017ee:	78c9      	ldrb	r1, [r1, #3]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u (%u) %u <<<\n\r",
 80017f0:	9104      	str	r1, [sp, #16]
 80017f2:	9503      	str	r5, [sp, #12]
 80017f4:	9402      	str	r4, [sp, #8]
 80017f6:	9001      	str	r0, [sp, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	4613      	mov	r3, r2
 80017fc:	4632      	mov	r2, r6
 80017fe:	4920      	ldr	r1, [pc, #128]	; (8001880 <Log_RepeatZoneData+0x168>)
 8001800:	481d      	ldr	r0, [pc, #116]	; (8001878 <Log_RepeatZoneData+0x160>)
 8001802:	f002 ffa1 	bl	8004748 <siprintf>
			break;
 8001806:	e01d      	b.n	8001844 <Log_RepeatZoneData+0x12c>
		case 3:
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u %u (%u) <<<\n\r",
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <Log_RepeatZoneData+0x14c>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461e      	mov	r6, r3
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <Log_RepeatZoneData+0x150>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <Log_RepeatZoneData+0x154>)
 8001814:	681b      	ldr	r3, [r3, #0]
					localZoneID, currentTemperature, currentMaxTilt,
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 8001816:	4916      	ldr	r1, [pc, #88]	; (8001870 <Log_RepeatZoneData+0x158>)
 8001818:	7809      	ldrb	r1, [r1, #0]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u %u (%u) <<<\n\r",
 800181a:	4608      	mov	r0, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 800181c:	4914      	ldr	r1, [pc, #80]	; (8001870 <Log_RepeatZoneData+0x158>)
 800181e:	7849      	ldrb	r1, [r1, #1]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u %u (%u) <<<\n\r",
 8001820:	460c      	mov	r4, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 8001822:	4913      	ldr	r1, [pc, #76]	; (8001870 <Log_RepeatZoneData+0x158>)
 8001824:	7889      	ldrb	r1, [r1, #2]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u %u (%u) <<<\n\r",
 8001826:	460d      	mov	r5, r1
					zoneStatus[0], zoneStatus[1], zoneStatus[2], zoneStatus[3]);
 8001828:	4911      	ldr	r1, [pc, #68]	; (8001870 <Log_RepeatZoneData+0x158>)
 800182a:	78c9      	ldrb	r1, [r1, #3]
			sprintf(logBuffer,">>> LocalZoneID: %u | Temp:%3d | Tilt: %2d | Zones: %u %u %u (%u) <<<\n\r",
 800182c:	9104      	str	r1, [sp, #16]
 800182e:	9503      	str	r5, [sp, #12]
 8001830:	9402      	str	r4, [sp, #8]
 8001832:	9001      	str	r0, [sp, #4]
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	4613      	mov	r3, r2
 8001838:	4632      	mov	r2, r6
 800183a:	4912      	ldr	r1, [pc, #72]	; (8001884 <Log_RepeatZoneData+0x16c>)
 800183c:	480e      	ldr	r0, [pc, #56]	; (8001878 <Log_RepeatZoneData+0x160>)
 800183e:	f002 ff83 	bl	8004748 <siprintf>
			break;
 8001842:	bf00      	nop
		}
		Log_LogString(logBuffer, LOGLEVEL_NORMAL);
 8001844:	2102      	movs	r1, #2
 8001846:	480c      	ldr	r0, [pc, #48]	; (8001878 <Log_RepeatZoneData+0x160>)
 8001848:	f7ff feec 	bl	8001624 <Log_LogString>

		// Reset "timer"
		repeated_log_delay = 500000;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <Log_RepeatZoneData+0x148>)
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <Log_RepeatZoneData+0x170>)
 8001850:	601a      	str	r2, [r3, #0]
	}
}
 8001852:	bf00      	nop
 8001854:	3704      	adds	r7, #4
 8001856:	46bd      	mov	sp, r7
 8001858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800185a:	bf00      	nop
 800185c:	20000324 	.word	0x20000324
 8001860:	200002fc 	.word	0x200002fc
 8001864:	2000030e 	.word	0x2000030e
 8001868:	20000304 	.word	0x20000304
 800186c:	20000308 	.word	0x20000308
 8001870:	20000310 	.word	0x20000310
 8001874:	080052d4 	.word	0x080052d4
 8001878:	2000021c 	.word	0x2000021c
 800187c:	0800531c 	.word	0x0800531c
 8001880:	08005364 	.word	0x08005364
 8001884:	080053ac 	.word	0x080053ac
 8001888:	0007a120 	.word	0x0007a120

0800188c <main>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int main(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	HAL_Init();
 8001890:	f000 fad0 	bl	8001e34 <HAL_Init>
	/* Configure the system clock to 168 MHz */
	SystemClock_Config();
 8001894:	f000 f806 	bl	80018a4 <SystemClock_Config>

	MainLoop_Init();
 8001898:	f000 f876 	bl	8001988 <MainLoop_Init>
	while (1)
	{
		MainLoop_Go();
 800189c:	f000 f8c4 	bl	8001a28 <MainLoop_Go>
 80018a0:	e7fc      	b.n	800189c <main+0x10>
	...

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	; 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2230      	movs	r2, #48	; 0x30
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 ff0c 	bl	80046d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b28      	ldr	r3, [pc, #160]	; (8001970 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	4a27      	ldr	r2, [pc, #156]	; (8001970 <SystemClock_Config+0xcc>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	; 0x40
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <SystemClock_Config+0xcc>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a21      	ldr	r2, [pc, #132]	; (8001974 <SystemClock_Config+0xd0>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <SystemClock_Config+0xd0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001900:	2301      	movs	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190a:	2302      	movs	r3, #2
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001914:	2304      	movs	r3, #4
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001918:	23a8      	movs	r3, #168	; 0xa8
 800191a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191c:	2302      	movs	r3, #2
 800191e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001920:	2307      	movs	r3, #7
 8001922:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f000 ffb9 	bl	80028a0 <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001934:	f000 f820 	bl	8001978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	230f      	movs	r3, #15
 800193a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001944:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800194a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800194e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2105      	movs	r1, #5
 8001956:	4618      	mov	r0, r3
 8001958:	f001 fa1a 	bl	8002d90 <HAL_RCC_ClockConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001962:	f000 f809 	bl	8001978 <Error_Handler>
  }
}
 8001966:	bf00      	nop
 8001968:	3750      	adds	r7, #80	; 0x50
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <MainLoop_Init>:
#include "bsp_uart.h"
#include "bsp_can.h"

/** Initialization, all subsystems are initialized */
void MainLoop_Init()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b09a      	sub	sp, #104	; 0x68
 800198c:	af00      	add	r7, sp, #0
	GlobalFunctions_Init();
 800198e:	f7ff f979 	bl	8000c84 <GlobalFunctions_Init>
	Log_Init();
 8001992:	f7ff fe41 	bl	8001618 <Log_Init>
	LocalSensorProcessing_Init();
 8001996:	f7ff fceb 	bl	8001370 <LocalSensorProcessing_Init>
	ButtonsSwitches_Init();
 800199a:	f7fe ff05 	bl	80007a8 <ButtonsSwitches_Init>
	Graphics_Init();
 800199e:	f7ff fb4f 	bl	8001040 <Graphics_Init>
	CAN_Init();
 80019a2:	f7fe ff7f 	bl	80008a4 <CAN_Init>

	Log_LogString("***********************\n\r",LOGLEVEL_NORMAL);
 80019a6:	2102      	movs	r1, #2
 80019a8:	4816      	ldr	r0, [pc, #88]	; (8001a04 <MainLoop_Init+0x7c>)
 80019aa:	f7ff fe3b 	bl	8001624 <Log_LogString>
	Log_LogString("*  Communication lab  *\n\r",LOGLEVEL_NORMAL);
 80019ae:	2102      	movs	r1, #2
 80019b0:	4815      	ldr	r0, [pc, #84]	; (8001a08 <MainLoop_Init+0x80>)
 80019b2:	f7ff fe37 	bl	8001624 <Log_LogString>
	Log_LogString("*       BME AUT       *\n\r",LOGLEVEL_NORMAL);
 80019b6:	2102      	movs	r1, #2
 80019b8:	4814      	ldr	r0, [pc, #80]	; (8001a0c <MainLoop_Init+0x84>)
 80019ba:	f7ff fe33 	bl	8001624 <Log_LogString>
	Log_LogString("***********************\n\r\n\r",LOGLEVEL_NORMAL);
 80019be:	2102      	movs	r1, #2
 80019c0:	4813      	ldr	r0, [pc, #76]	; (8001a10 <MainLoop_Init+0x88>)
 80019c2:	f7ff fe2f 	bl	8001624 <Log_LogString>

	localZoneID = ButtonsSwitches_GetLocalZoneID();
 80019c6:	f7fe ff51 	bl	800086c <ButtonsSwitches_GetLocalZoneID>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MainLoop_Init+0x8c>)
 80019d0:	701a      	strb	r2, [r3, #0]

	char buffer[100];
	snprintf(buffer,100,"Local Zone ID: %u\n\r",localZoneID);
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MainLoop_Init+0x8c>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	1d38      	adds	r0, r7, #4
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <MainLoop_Init+0x90>)
 80019da:	2164      	movs	r1, #100	; 0x64
 80019dc:	f002 fe80 	bl	80046e0 <sniprintf>
	Log_LogString(buffer,LOGLEVEL_NORMAL);
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2102      	movs	r1, #2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe1d 	bl	8001624 <Log_LogString>

	// Show everything at startup
	hasAnyZoneStatusChanged = 1;
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <MainLoop_Init+0x94>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
	hasLocalZoneStatusChanged = 1;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MainLoop_Init+0x98>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
	hasSensorDataChanged = 1;
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <MainLoop_Init+0x9c>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
}
 80019fc:	bf00      	nop
 80019fe:	3768      	adds	r7, #104	; 0x68
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	080053f4 	.word	0x080053f4
 8001a08:	08005410 	.word	0x08005410
 8001a0c:	0800542c 	.word	0x0800542c
 8001a10:	08005448 	.word	0x08005448
 8001a14:	2000030e 	.word	0x2000030e
 8001a18:	08005464 	.word	0x08005464
 8001a1c:	20000315 	.word	0x20000315
 8001a20:	20000316 	.word	0x20000316
 8001a24:	20000314 	.word	0x20000314

08001a28 <MainLoop_Go>:

/** One iteration of the infinite main loop */
void MainLoop_Go()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	Log_LogString("MAINLOOP: Main cycle - next iteration\n\r",LOGLEVEL_DETAILED);
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	480b      	ldr	r0, [pc, #44]	; (8001a5c <MainLoop_Go+0x34>)
 8001a30:	f7ff fdf8 	bl	8001624 <Log_LogString>

	// Handle sensors
	LocalSensorProcessing_Go();
 8001a34:	f7ff fcc6 	bl	80013c4 <LocalSensorProcessing_Go>
	// handle CAN communication
	CAN_Go();
 8001a38:	f7fe ff4c 	bl	80008d4 <CAN_Go>
	// Update graphics LCD (if needed)
	Graphics_Go();
 8001a3c:	f7ff fb06 	bl	800104c <Graphics_Go>
	// Regular display of detailed measurement data in the log
	Log_RepeatZoneData();
 8001a40:	f7ff fe6a 	bl	8001718 <Log_RepeatZoneData>
	// - Unknown character: Send an error message.


	
	// Clearing the flags indicating changes
	hasAnyZoneStatusChanged = 0;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MainLoop_Go+0x38>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
	hasLocalZoneStatusChanged = 0;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <MainLoop_Go+0x3c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
	hasSensorDataChanged = 0;
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <MainLoop_Go+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	08005478 	.word	0x08005478
 8001a60:	20000315 	.word	0x20000315
 8001a64:	20000316 	.word	0x20000316
 8001a68:	20000314 	.word	0x20000314

08001a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	607b      	str	r3, [r7, #4]
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	607b      	str	r3, [r7, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_MspInit+0x4c>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	603b      	str	r3, [r7, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001aaa:	2007      	movs	r0, #7
 8001aac:	f000 fb4c 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	e7fe      	b.n	8001ace <HardFault_Handler+0x4>

08001ad0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <MemManage_Handler+0x4>

08001ad6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ada:	e7fe      	b.n	8001ada <BusFault_Handler+0x4>

08001adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <UsageFault_Handler+0x4>

08001ae2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b10:	f000 f9e2 	bl	8001ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM4_IRQHandler+0x10>)
 8001b1e:	f001 fc17 	bl	8003350 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2000032c 	.word	0x2000032c

08001b2c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001b30:	4802      	ldr	r0, [pc, #8]	; (8001b3c <UART4_IRQHandler+0x10>)
 8001b32:	f002 f819 	bl	8003b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000374 	.word	0x20000374

08001b40 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <_sbrk+0x50>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d102      	bne.n	8001b56 <_sbrk+0x16>
		heap_end = &end;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <_sbrk+0x50>)
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <_sbrk+0x54>)
 8001b54:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <_sbrk+0x50>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <_sbrk+0x50>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4413      	add	r3, r2
 8001b64:	466a      	mov	r2, sp
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d907      	bls.n	8001b7a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b6a:	f002 fd87 	bl	800467c <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	220c      	movs	r2, #12
 8001b72:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
 8001b78:	e006      	b.n	8001b88 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <_sbrk+0x50>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a03      	ldr	r2, [pc, #12]	; (8001b90 <_sbrk+0x50>)
 8001b84:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b86:	68fb      	ldr	r3, [r7, #12]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	20000328 	.word	0x20000328
 8001b94:	200003d0 	.word	0x200003d0

08001b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <SystemInit+0x28>)
 8001b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ba2:	4a07      	ldr	r2, [pc, #28]	; (8001bc0 <SystemInit+0x28>)
 8001ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <SystemInit+0x28>)
 8001bae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb2:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	463b      	mov	r3, r7
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001be0:	4b1c      	ldr	r3, [pc, #112]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <MX_TIM4_Init+0x94>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001be6:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001bee:	2210      	movs	r2, #16
 8001bf0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 168;
 8001bf2:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001bf4:	22a8      	movs	r2, #168	; 0xa8
 8001bf6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c04:	4813      	ldr	r0, [pc, #76]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001c06:	f001 fae3 	bl	80031d0 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001c10:	f7ff feb2 	bl	8001978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001c22:	f001 fc9d 	bl	8003560 <HAL_TIM_ConfigClockSource>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001c2c:	f7ff fea4 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c38:	463b      	mov	r3, r7
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_TIM4_Init+0x90>)
 8001c3e:	f001 feb5 	bl	80039ac <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001c48:	f7ff fe96 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000032c 	.word	0x2000032c
 8001c58:	40000800 	.word	0x40000800

08001c5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0e      	ldr	r2, [pc, #56]	; (8001ca4 <HAL_TIM_Base_MspInit+0x48>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d115      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a0c      	ldr	r2, [pc, #48]	; (8001ca8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c78:	f043 0304 	orr.w	r3, r3, #4
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_TIM_Base_MspInit+0x4c>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	201e      	movs	r0, #30
 8001c90:	f000 fa65 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c94:	201e      	movs	r0, #30
 8001c96:	f000 fa7e 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40023800 	.word	0x40023800

08001cac <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cb2:	4a12      	ldr	r2, [pc, #72]	; (8001cfc <MX_UART4_Init+0x50>)
 8001cb4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cbc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cca:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cd2:	220c      	movs	r2, #12
 8001cd4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ce2:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_UART4_Init+0x4c>)
 8001ce4:	f001 fef2 	bl	8003acc <HAL_UART_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001cee:	f7ff fe43 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000374 	.word	0x20000374
 8001cfc:	40004c00 	.word	0x40004c00

08001d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1d      	ldr	r2, [pc, #116]	; (8001d94 <HAL_UART_MspInit+0x94>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d133      	bne.n	8001d8a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <HAL_UART_MspInit+0x98>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	; (8001d98 <HAL_UART_MspInit+0x98>)
 8001d2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_UART_MspInit+0x98>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <HAL_UART_MspInit+0x98>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <HAL_UART_MspInit+0x98>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_UART_MspInit+0x98>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d6a:	2308      	movs	r3, #8
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4809      	ldr	r0, [pc, #36]	; (8001d9c <HAL_UART_MspInit+0x9c>)
 8001d76:	f000 fac9 	bl	800230c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2034      	movs	r0, #52	; 0x34
 8001d80:	f000 f9ed 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d84:	2034      	movs	r0, #52	; 0x34
 8001d86:	f000 fa06 	bl	8002196 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3728      	adds	r7, #40	; 0x28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40004c00 	.word	0x40004c00
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000

08001da0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a09      	ldr	r2, [pc, #36]	; (8001dd4 <HAL_UART_MspDeInit+0x34>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d10c      	bne.n	8001dcc <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_UART_MspDeInit+0x38>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_UART_MspDeInit+0x38>)
 8001db8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001dbe:	2103      	movs	r1, #3
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_UART_MspDeInit+0x3c>)
 8001dc2:	f000 fc3f 	bl	8002644 <HAL_GPIO_DeInit>

    /* UART4 interrupt Deinit */
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001dc6:	2034      	movs	r0, #52	; 0x34
 8001dc8:	f000 f9f3 	bl	80021b2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
}
 8001dcc:	bf00      	nop
 8001dce:	3708      	adds	r7, #8
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40004c00 	.word	0x40004c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001de4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001de6:	e003      	b.n	8001df0 <LoopCopyDataInit>

08001de8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dee:	3104      	adds	r1, #4

08001df0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001df2:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001df4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001df6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001df8:	d3f6      	bcc.n	8001de8 <CopyDataInit>
  ldr  r2, =_sbss
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dfc:	e002      	b.n	8001e04 <LoopFillZerobss>

08001dfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e00:	f842 3b04 	str.w	r3, [r2], #4

08001e04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e08:	d3f9      	bcc.n	8001dfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e0a:	f7ff fec5 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f002 fc3b 	bl	8004688 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff fd3b 	bl	800188c <main>
  bx  lr    
 8001e16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e1c:	080058fc 	.word	0x080058fc
  ldr  r0, =_sdata
 8001e20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e24:	200002d8 	.word	0x200002d8
  ldr  r2, =_sbss
 8001e28:	200002d8 	.word	0x200002d8
  ldr  r3, = _ebss
 8001e2c:	200003cc 	.word	0x200003cc

08001e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC_IRQHandler>
	...

08001e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e38:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <HAL_Init+0x40>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_Init+0x40>)
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_Init+0x40>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	; (8001e74 <HAL_Init+0x40>)
 8001e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a07      	ldr	r2, [pc, #28]	; (8001e74 <HAL_Init+0x40>)
 8001e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f973 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 f808 	bl	8001e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e68:	f7ff fe00 	bl	8001a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023c00 	.word	0x40023c00

08001e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e80:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <HAL_InitTick+0x54>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_InitTick+0x58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	f000 f999 	bl	80021ce <HAL_SYSTICK_Config>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e00e      	b.n	8001ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b0f      	cmp	r3, #15
 8001eaa:	d80a      	bhi.n	8001ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eac:	2200      	movs	r2, #0
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb4:	f000 f953 	bl	800215e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_InitTick+0x5c>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20000268 	.word	0x20000268
 8001ed0:	20000270 	.word	0x20000270
 8001ed4:	2000026c 	.word	0x2000026c

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000270 	.word	0x20000270
 8001efc:	200003b8 	.word	0x200003b8

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	200003b8 	.word	0x200003b8

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff ffee 	bl	8001f00 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d005      	beq.n	8001f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_Delay+0x44>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3e:	bf00      	nop
 8001f40:	f7ff ffde 	bl	8001f00 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d8f7      	bhi.n	8001f40 <HAL_Delay+0x28>
  {
  }
}
 8001f50:	bf00      	nop
 8001f52:	bf00      	nop
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000270 	.word	0x20000270

08001f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f76:	68ba      	ldr	r2, [r7, #8]
 8001f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f92:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	60d3      	str	r3, [r2, #12]
}
 8001f98:	bf00      	nop
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	f003 0307 	and.w	r3, r3, #7
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	db0b      	blt.n	8001fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd6:	79fb      	ldrb	r3, [r7, #7]
 8001fd8:	f003 021f 	and.w	r2, r3, #31
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <__NVIC_EnableIRQ+0x38>)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	095b      	lsrs	r3, r3, #5
 8001fe4:	2001      	movs	r0, #1
 8001fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8001fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000e100 	.word	0xe000e100

08002000 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db12      	blt.n	8002038 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	490a      	ldr	r1, [pc, #40]	; (8002044 <__NVIC_DisableIRQ+0x44>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	3320      	adds	r3, #32
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800202c:	f3bf 8f4f 	dsb	sy
}
 8002030:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002032:	f3bf 8f6f 	isb	sy
}
 8002036:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	; (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	; (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	; 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	4313      	orrs	r3, r2
         );
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	; 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002132:	4b04      	ldr	r3, [pc, #16]	; (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff05 	bl	8001f60 <__NVIC_SetPriorityGrouping>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002170:	f7ff ff1a 	bl	8001fa8 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
}
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff0d 	bl	8001fc4 <__NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80021bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff1d 	bl	8002000 <__NVIC_DisableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ff94 	bl	8002104 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff fe84 	bl	8001f00 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d008      	beq.n	8002218 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2280      	movs	r2, #128	; 0x80
 800220a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e052      	b.n	80022be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f022 0216 	bic.w	r2, r2, #22
 8002226:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002236:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	2b00      	cmp	r3, #0
 800223e:	d103      	bne.n	8002248 <HAL_DMA_Abort+0x62>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0208 	bic.w	r2, r2, #8
 8002256:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0201 	bic.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002268:	e013      	b.n	8002292 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800226a:	f7ff fe49 	bl	8001f00 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b05      	cmp	r3, #5
 8002276:	d90c      	bls.n	8002292 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2220      	movs	r2, #32
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e015      	b.n	80022be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e4      	bne.n	800226a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	223f      	movs	r2, #63	; 0x3f
 80022a6:	409a      	lsls	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d004      	beq.n	80022e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2280      	movs	r2, #128	; 0x80
 80022de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e00c      	b.n	80022fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2205      	movs	r2, #5
 80022e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800230c:	b480      	push	{r7}
 800230e:	b089      	sub	sp, #36	; 0x24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800231e:	2300      	movs	r3, #0
 8002320:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002322:	2300      	movs	r3, #0
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e16b      	b.n	8002600 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4013      	ands	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	429a      	cmp	r2, r3
 8002342:	f040 815a 	bne.w	80025fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d005      	beq.n	800235e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235a:	2b02      	cmp	r3, #2
 800235c:	d130      	bne.n	80023c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	2203      	movs	r2, #3
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4013      	ands	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f003 0201 	and.w	r2, r3, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d017      	beq.n	80023fc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d123      	bne.n	8002450 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	08da      	lsrs	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3208      	adds	r2, #8
 8002410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	220f      	movs	r2, #15
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	691a      	ldr	r2, [r3, #16]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	4313      	orrs	r3, r2
 8002440:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	08da      	lsrs	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3208      	adds	r2, #8
 800244a:	69b9      	ldr	r1, [r7, #24]
 800244c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	2203      	movs	r2, #3
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0203 	and.w	r2, r3, #3
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	f000 80b4 	beq.w	80025fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	4b60      	ldr	r3, [pc, #384]	; (8002618 <HAL_GPIO_Init+0x30c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	4a5f      	ldr	r2, [pc, #380]	; (8002618 <HAL_GPIO_Init+0x30c>)
 800249c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024a0:	6453      	str	r3, [r2, #68]	; 0x44
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_GPIO_Init+0x30c>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ae:	4a5b      	ldr	r2, [pc, #364]	; (800261c <HAL_GPIO_Init+0x310>)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	089b      	lsrs	r3, r3, #2
 80024b4:	3302      	adds	r3, #2
 80024b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	220f      	movs	r2, #15
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_GPIO_Init+0x314>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02b      	beq.n	8002532 <HAL_GPIO_Init+0x226>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a51      	ldr	r2, [pc, #324]	; (8002624 <HAL_GPIO_Init+0x318>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d025      	beq.n	800252e <HAL_GPIO_Init+0x222>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a50      	ldr	r2, [pc, #320]	; (8002628 <HAL_GPIO_Init+0x31c>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d01f      	beq.n	800252a <HAL_GPIO_Init+0x21e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a4f      	ldr	r2, [pc, #316]	; (800262c <HAL_GPIO_Init+0x320>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x21a>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a4e      	ldr	r2, [pc, #312]	; (8002630 <HAL_GPIO_Init+0x324>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x216>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	; (8002634 <HAL_GPIO_Init+0x328>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x212>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a4c      	ldr	r2, [pc, #304]	; (8002638 <HAL_GPIO_Init+0x32c>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x20e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a4b      	ldr	r2, [pc, #300]	; (800263c <HAL_GPIO_Init+0x330>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x20a>
 8002512:	2307      	movs	r3, #7
 8002514:	e00e      	b.n	8002534 <HAL_GPIO_Init+0x228>
 8002516:	2308      	movs	r3, #8
 8002518:	e00c      	b.n	8002534 <HAL_GPIO_Init+0x228>
 800251a:	2306      	movs	r3, #6
 800251c:	e00a      	b.n	8002534 <HAL_GPIO_Init+0x228>
 800251e:	2305      	movs	r3, #5
 8002520:	e008      	b.n	8002534 <HAL_GPIO_Init+0x228>
 8002522:	2304      	movs	r3, #4
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x228>
 8002526:	2303      	movs	r3, #3
 8002528:	e004      	b.n	8002534 <HAL_GPIO_Init+0x228>
 800252a:	2302      	movs	r3, #2
 800252c:	e002      	b.n	8002534 <HAL_GPIO_Init+0x228>
 800252e:	2301      	movs	r3, #1
 8002530:	e000      	b.n	8002534 <HAL_GPIO_Init+0x228>
 8002532:	2300      	movs	r3, #0
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	f002 0203 	and.w	r2, r2, #3
 800253a:	0092      	lsls	r2, r2, #2
 800253c:	4093      	lsls	r3, r2
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002544:	4935      	ldr	r1, [pc, #212]	; (800261c <HAL_GPIO_Init+0x310>)
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	3302      	adds	r3, #2
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_GPIO_Init+0x334>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002576:	4a32      	ldr	r2, [pc, #200]	; (8002640 <HAL_GPIO_Init+0x334>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_GPIO_Init+0x334>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025a0:	4a27      	ldr	r2, [pc, #156]	; (8002640 <HAL_GPIO_Init+0x334>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_GPIO_Init+0x334>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ca:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <HAL_GPIO_Init+0x334>)
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d0:	4b1b      	ldr	r3, [pc, #108]	; (8002640 <HAL_GPIO_Init+0x334>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f4:	4a12      	ldr	r2, [pc, #72]	; (8002640 <HAL_GPIO_Init+0x334>)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3301      	adds	r3, #1
 80025fe:	61fb      	str	r3, [r7, #28]
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	2b0f      	cmp	r3, #15
 8002604:	f67f ae90 	bls.w	8002328 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3724      	adds	r7, #36	; 0x24
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	40013800 	.word	0x40013800
 8002620:	40020000 	.word	0x40020000
 8002624:	40020400 	.word	0x40020400
 8002628:	40020800 	.word	0x40020800
 800262c:	40020c00 	.word	0x40020c00
 8002630:	40021000 	.word	0x40021000
 8002634:	40021400 	.word	0x40021400
 8002638:	40021800 	.word	0x40021800
 800263c:	40021c00 	.word	0x40021c00
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e0cd      	b.n	80027fc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002660:	2201      	movs	r2, #1
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	429a      	cmp	r2, r3
 8002678:	f040 80bd 	bne.w	80027f6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800267c:	4a65      	ldr	r2, [pc, #404]	; (8002814 <HAL_GPIO_DeInit+0x1d0>)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	089b      	lsrs	r3, r3, #2
 8002682:	3302      	adds	r3, #2
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	4013      	ands	r3, r2
 800269c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a5d      	ldr	r2, [pc, #372]	; (8002818 <HAL_GPIO_DeInit+0x1d4>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d02b      	beq.n	80026fe <HAL_GPIO_DeInit+0xba>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_GPIO_DeInit+0x1d8>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d025      	beq.n	80026fa <HAL_GPIO_DeInit+0xb6>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a5b      	ldr	r2, [pc, #364]	; (8002820 <HAL_GPIO_DeInit+0x1dc>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d01f      	beq.n	80026f6 <HAL_GPIO_DeInit+0xb2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a5a      	ldr	r2, [pc, #360]	; (8002824 <HAL_GPIO_DeInit+0x1e0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d019      	beq.n	80026f2 <HAL_GPIO_DeInit+0xae>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a59      	ldr	r2, [pc, #356]	; (8002828 <HAL_GPIO_DeInit+0x1e4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d013      	beq.n	80026ee <HAL_GPIO_DeInit+0xaa>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_GPIO_DeInit+0x1e8>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00d      	beq.n	80026ea <HAL_GPIO_DeInit+0xa6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a57      	ldr	r2, [pc, #348]	; (8002830 <HAL_GPIO_DeInit+0x1ec>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <HAL_GPIO_DeInit+0xa2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_GPIO_DeInit+0x1f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d101      	bne.n	80026e2 <HAL_GPIO_DeInit+0x9e>
 80026de:	2307      	movs	r3, #7
 80026e0:	e00e      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00c      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e00a      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026ea:	2305      	movs	r3, #5
 80026ec:	e008      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026ee:	2304      	movs	r3, #4
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026f2:	2303      	movs	r3, #3
 80026f4:	e004      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e002      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_DeInit+0xbc>
 80026fe:	2300      	movs	r3, #0
 8002700:	697a      	ldr	r2, [r7, #20]
 8002702:	f002 0203 	and.w	r2, r2, #3
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	4093      	lsls	r3, r2
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	429a      	cmp	r2, r3
 800270e:	d132      	bne.n	8002776 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002710:	4b49      	ldr	r3, [pc, #292]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	43db      	mvns	r3, r3
 8002718:	4947      	ldr	r1, [pc, #284]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 800271a:	4013      	ands	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800271e:	4b46      	ldr	r3, [pc, #280]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	43db      	mvns	r3, r3
 8002726:	4944      	ldr	r1, [pc, #272]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 8002728:	4013      	ands	r3, r2
 800272a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800272c:	4b42      	ldr	r3, [pc, #264]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	4940      	ldr	r1, [pc, #256]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 8002736:	4013      	ands	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800273a:	4b3f      	ldr	r3, [pc, #252]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 800273c:	68da      	ldr	r2, [r3, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	43db      	mvns	r3, r3
 8002742:	493d      	ldr	r1, [pc, #244]	; (8002838 <HAL_GPIO_DeInit+0x1f4>)
 8002744:	4013      	ands	r3, r2
 8002746:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f003 0303 	and.w	r3, r3, #3
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	220f      	movs	r2, #15
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002758:	4a2e      	ldr	r2, [pc, #184]	; (8002814 <HAL_GPIO_DeInit+0x1d0>)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	43da      	mvns	r2, r3
 8002768:	482a      	ldr	r0, [pc, #168]	; (8002814 <HAL_GPIO_DeInit+0x1d0>)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	400a      	ands	r2, r1
 8002770:	3302      	adds	r3, #2
 8002772:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	2103      	movs	r1, #3
 8002780:	fa01 f303 	lsl.w	r3, r1, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	401a      	ands	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	08da      	lsrs	r2, r3, #3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3208      	adds	r2, #8
 8002794:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	220f      	movs	r2, #15
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	08d2      	lsrs	r2, r2, #3
 80027ac:	4019      	ands	r1, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2103      	movs	r1, #3
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	401a      	ands	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	2101      	movs	r1, #1
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	fa01 f303 	lsl.w	r3, r1, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	401a      	ands	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	2103      	movs	r1, #3
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	401a      	ands	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	3301      	adds	r3, #1
 80027fa:	617b      	str	r3, [r7, #20]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b0f      	cmp	r3, #15
 8002800:	f67f af2e 	bls.w	8002660 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40013800 	.word	0x40013800
 8002818:	40020000 	.word	0x40020000
 800281c:	40020400 	.word	0x40020400
 8002820:	40020800 	.word	0x40020800
 8002824:	40020c00 	.word	0x40020c00
 8002828:	40021000 	.word	0x40021000
 800282c:	40021400 	.word	0x40021400
 8002830:	40021800 	.word	0x40021800
 8002834:	40021c00 	.word	0x40021c00
 8002838:	40013c00 	.word	0x40013c00

0800283c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d002      	beq.n	800285a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
 8002858:	e001      	b.n	800285e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800285e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	807b      	strh	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800287c:	787b      	ldrb	r3, [r7, #1]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002882:	887a      	ldrh	r2, [r7, #2]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002888:	e003      	b.n	8002892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800288a:	887b      	ldrh	r3, [r7, #2]
 800288c:	041a      	lsls	r2, r3, #16
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	619a      	str	r2, [r3, #24]
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e267      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d075      	beq.n	80029aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028be:	4b88      	ldr	r3, [pc, #544]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d00c      	beq.n	80028e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b85      	ldr	r3, [pc, #532]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028d2:	2b08      	cmp	r3, #8
 80028d4:	d112      	bne.n	80028fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d6:	4b82      	ldr	r3, [pc, #520]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028e2:	d10b      	bne.n	80028fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e4:	4b7e      	ldr	r3, [pc, #504]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d05b      	beq.n	80029a8 <HAL_RCC_OscConfig+0x108>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d157      	bne.n	80029a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e242      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002904:	d106      	bne.n	8002914 <HAL_RCC_OscConfig+0x74>
 8002906:	4b76      	ldr	r3, [pc, #472]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a75      	ldr	r2, [pc, #468]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 800290c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	e01d      	b.n	8002950 <HAL_RCC_OscConfig+0xb0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800291c:	d10c      	bne.n	8002938 <HAL_RCC_OscConfig+0x98>
 800291e:	4b70      	ldr	r3, [pc, #448]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6f      	ldr	r2, [pc, #444]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	4b6d      	ldr	r3, [pc, #436]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6c      	ldr	r2, [pc, #432]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e00b      	b.n	8002950 <HAL_RCC_OscConfig+0xb0>
 8002938:	4b69      	ldr	r3, [pc, #420]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a68      	ldr	r2, [pc, #416]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 800293e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	4b66      	ldr	r3, [pc, #408]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a65      	ldr	r2, [pc, #404]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 800294a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800294e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d013      	beq.n	8002980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002958:	f7ff fad2 	bl	8001f00 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff face 	bl	8001f00 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e207      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	4b5b      	ldr	r3, [pc, #364]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0xc0>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff fabe 	bl	8001f00 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff faba 	bl	8001f00 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e1f3      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	4b51      	ldr	r3, [pc, #324]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0xe8>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d063      	beq.n	8002a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029b6:	4b4a      	ldr	r3, [pc, #296]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00b      	beq.n	80029da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b47      	ldr	r3, [pc, #284]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029ca:	2b08      	cmp	r3, #8
 80029cc:	d11c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ce:	4b44      	ldr	r3, [pc, #272]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d116      	bne.n	8002a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029da:	4b41      	ldr	r3, [pc, #260]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x152>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e1c7      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f2:	4b3b      	ldr	r3, [pc, #236]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	4937      	ldr	r1, [pc, #220]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	e03a      	b.n	8002a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d020      	beq.n	8002a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a10:	4b34      	ldr	r3, [pc, #208]	; (8002ae4 <HAL_RCC_OscConfig+0x244>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a16:	f7ff fa73 	bl	8001f00 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a1e:	f7ff fa6f 	bl	8001f00 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e1a8      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	4b2b      	ldr	r3, [pc, #172]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0f0      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a3c:	4b28      	ldr	r3, [pc, #160]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4925      	ldr	r1, [pc, #148]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	600b      	str	r3, [r1, #0]
 8002a50:	e015      	b.n	8002a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a52:	4b24      	ldr	r3, [pc, #144]	; (8002ae4 <HAL_RCC_OscConfig+0x244>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7ff fa52 	bl	8001f00 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a60:	f7ff fa4e 	bl	8001f00 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e187      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0308 	and.w	r3, r3, #8
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d036      	beq.n	8002af8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d016      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a92:	4b15      	ldr	r3, [pc, #84]	; (8002ae8 <HAL_RCC_OscConfig+0x248>)
 8002a94:	2201      	movs	r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a98:	f7ff fa32 	bl	8001f00 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7ff fa2e 	bl	8001f00 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e167      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	4b0b      	ldr	r3, [pc, #44]	; (8002ae0 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0f0      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x200>
 8002abe:	e01b      	b.n	8002af8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac0:	4b09      	ldr	r3, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x248>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac6:	f7ff fa1b 	bl	8001f00 <HAL_GetTick>
 8002aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	e00e      	b.n	8002aec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ace:	f7ff fa17 	bl	8001f00 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d907      	bls.n	8002aec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002adc:	2303      	movs	r3, #3
 8002ade:	e150      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	42470000 	.word	0x42470000
 8002ae8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aec:	4b88      	ldr	r3, [pc, #544]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1ea      	bne.n	8002ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 8097 	beq.w	8002c34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b06:	2300      	movs	r3, #0
 8002b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b0a:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	60bb      	str	r3, [r7, #8]
 8002b1a:	4b7d      	ldr	r3, [pc, #500]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	4a7c      	ldr	r2, [pc, #496]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b24:	6413      	str	r3, [r2, #64]	; 0x40
 8002b26:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b32:	2301      	movs	r3, #1
 8002b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	4b77      	ldr	r3, [pc, #476]	; (8002d14 <HAL_RCC_OscConfig+0x474>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d118      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b42:	4b74      	ldr	r3, [pc, #464]	; (8002d14 <HAL_RCC_OscConfig+0x474>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a73      	ldr	r2, [pc, #460]	; (8002d14 <HAL_RCC_OscConfig+0x474>)
 8002b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b4e:	f7ff f9d7 	bl	8001f00 <HAL_GetTick>
 8002b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b54:	e008      	b.n	8002b68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b56:	f7ff f9d3 	bl	8001f00 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e10c      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <HAL_RCC_OscConfig+0x474>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d0f0      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d106      	bne.n	8002b8a <HAL_RCC_OscConfig+0x2ea>
 8002b7c:	4b64      	ldr	r3, [pc, #400]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a63      	ldr	r2, [pc, #396]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b82:	f043 0301 	orr.w	r3, r3, #1
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x324>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x30c>
 8002b92:	4b5f      	ldr	r3, [pc, #380]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b96:	4a5e      	ldr	r2, [pc, #376]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002b98:	f043 0304 	orr.w	r3, r3, #4
 8002b9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9e:	4b5c      	ldr	r3, [pc, #368]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a5b      	ldr	r2, [pc, #364]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x324>
 8002bac:	4b58      	ldr	r3, [pc, #352]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb0:	4a57      	ldr	r2, [pc, #348]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 0301 	bic.w	r3, r3, #1
 8002bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb8:	4b55      	ldr	r3, [pc, #340]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a54      	ldr	r2, [pc, #336]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	f023 0304 	bic.w	r3, r3, #4
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d015      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bcc:	f7ff f998 	bl	8001f00 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd2:	e00a      	b.n	8002bea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd4:	f7ff f994 	bl	8001f00 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0cb      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0ee      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x334>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf8:	f7ff f982 	bl	8001f00 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7ff f97e 	bl	8001f00 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0b5      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d1ee      	bne.n	8002c00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c22:	7dfb      	ldrb	r3, [r7, #23]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2c:	4a38      	ldr	r2, [pc, #224]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 80a1 	beq.w	8002d80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c3e:	4b34      	ldr	r3, [pc, #208]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d05c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d141      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_RCC_OscConfig+0x478>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7ff f952 	bl	8001f00 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7ff f94e 	bl	8001f00 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e087      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c72:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69da      	ldr	r2, [r3, #28]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	019b      	lsls	r3, r3, #6
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c94:	085b      	lsrs	r3, r3, #1
 8002c96:	3b01      	subs	r3, #1
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca0:	061b      	lsls	r3, r3, #24
 8002ca2:	491b      	ldr	r1, [pc, #108]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCC_OscConfig+0x478>)
 8002caa:	2201      	movs	r2, #1
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7ff f927 	bl	8001f00 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7ff f923 	bl	8001f00 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e05c      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x416>
 8002cd4:	e054      	b.n	8002d80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <HAL_RCC_OscConfig+0x478>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7ff f910 	bl	8001f00 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce4:	f7ff f90c 	bl	8001f00 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e045      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x444>
 8002d02:	e03d      	b.n	8002d80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e038      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40007000 	.word	0x40007000
 8002d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <HAL_RCC_OscConfig+0x4ec>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d028      	beq.n	8002d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d121      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d11a      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d111      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e000      	b.n	8002d82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40023800 	.word	0x40023800

08002d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0cc      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002da4:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0307 	and.w	r3, r3, #7
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d90c      	bls.n	8002dcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db2:	4b65      	ldr	r3, [pc, #404]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dba:	4b63      	ldr	r3, [pc, #396]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d001      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e0b8      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de4:	4b59      	ldr	r3, [pc, #356]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002dea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0308 	and.w	r3, r3, #8
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d005      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dfc:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	494d      	ldr	r1, [pc, #308]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d044      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d119      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e07f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d003      	beq.n	8002e4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e4a:	2b03      	cmp	r3, #3
 8002e4c:	d107      	bne.n	8002e5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d109      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e06f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e067      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e6e:	4b37      	ldr	r3, [pc, #220]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4934      	ldr	r1, [pc, #208]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e80:	f7ff f83e 	bl	8001f00 <HAL_GetTick>
 8002e84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e86:	e00a      	b.n	8002e9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e88:	f7ff f83a 	bl	8001f00 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e04f      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e9e:	4b2b      	ldr	r3, [pc, #172]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 020c 	and.w	r2, r3, #12
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d1eb      	bne.n	8002e88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d20c      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebe:	4b22      	ldr	r3, [pc, #136]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b20      	ldr	r3, [pc, #128]	; (8002f48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e032      	b.n	8002f3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee4:	4b19      	ldr	r3, [pc, #100]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	4916      	ldr	r1, [pc, #88]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f02:	4b12      	ldr	r3, [pc, #72]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	490e      	ldr	r1, [pc, #56]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f16:	f000 f821 	bl	8002f5c <HAL_RCC_GetSysClockFreq>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	490a      	ldr	r1, [pc, #40]	; (8002f50 <HAL_RCC_ClockConfig+0x1c0>)
 8002f28:	5ccb      	ldrb	r3, [r1, r3]
 8002f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f32:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <HAL_RCC_ClockConfig+0x1c8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe ff9e 	bl	8001e78 <HAL_InitTick>

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023c00 	.word	0x40023c00
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	080058a0 	.word	0x080058a0
 8002f54:	20000268 	.word	0x20000268
 8002f58:	2000026c 	.word	0x2000026c

08002f5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f60:	b094      	sub	sp, #80	; 0x50
 8002f62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	647b      	str	r3, [r7, #68]	; 0x44
 8002f68:	2300      	movs	r3, #0
 8002f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002f70:	2300      	movs	r3, #0
 8002f72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f74:	4b79      	ldr	r3, [pc, #484]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 030c 	and.w	r3, r3, #12
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d00d      	beq.n	8002f9c <HAL_RCC_GetSysClockFreq+0x40>
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	f200 80e1 	bhi.w	8003148 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x34>
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d003      	beq.n	8002f96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f8e:	e0db      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b73      	ldr	r3, [pc, #460]	; (8003160 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002f94:	e0db      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f9a:	e0d8      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f9c:	4b6f      	ldr	r3, [pc, #444]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	2200      	movs	r2, #0
 8002fba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fce:	4622      	mov	r2, r4
 8002fd0:	462b      	mov	r3, r5
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f04f 0100 	mov.w	r1, #0
 8002fda:	0159      	lsls	r1, r3, #5
 8002fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fe0:	0150      	lsls	r0, r2, #5
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4621      	mov	r1, r4
 8002fe8:	1a51      	subs	r1, r2, r1
 8002fea:	6139      	str	r1, [r7, #16]
 8002fec:	4629      	mov	r1, r5
 8002fee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ff2:	617b      	str	r3, [r7, #20]
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003000:	4659      	mov	r1, fp
 8003002:	018b      	lsls	r3, r1, #6
 8003004:	4651      	mov	r1, sl
 8003006:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800300a:	4651      	mov	r1, sl
 800300c:	018a      	lsls	r2, r1, #6
 800300e:	4651      	mov	r1, sl
 8003010:	ebb2 0801 	subs.w	r8, r2, r1
 8003014:	4659      	mov	r1, fp
 8003016:	eb63 0901 	sbc.w	r9, r3, r1
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003026:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800302a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800302e:	4690      	mov	r8, r2
 8003030:	4699      	mov	r9, r3
 8003032:	4623      	mov	r3, r4
 8003034:	eb18 0303 	adds.w	r3, r8, r3
 8003038:	60bb      	str	r3, [r7, #8]
 800303a:	462b      	mov	r3, r5
 800303c:	eb49 0303 	adc.w	r3, r9, r3
 8003040:	60fb      	str	r3, [r7, #12]
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800304e:	4629      	mov	r1, r5
 8003050:	024b      	lsls	r3, r1, #9
 8003052:	4621      	mov	r1, r4
 8003054:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003058:	4621      	mov	r1, r4
 800305a:	024a      	lsls	r2, r1, #9
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003062:	2200      	movs	r2, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
 8003066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003068:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800306c:	f7fd f900 	bl	8000270 <__aeabi_uldivmod>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4613      	mov	r3, r2
 8003076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003078:	e058      	b.n	800312c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307a:	4b38      	ldr	r3, [pc, #224]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	099b      	lsrs	r3, r3, #6
 8003080:	2200      	movs	r2, #0
 8003082:	4618      	mov	r0, r3
 8003084:	4611      	mov	r1, r2
 8003086:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800308a:	623b      	str	r3, [r7, #32]
 800308c:	2300      	movs	r3, #0
 800308e:	627b      	str	r3, [r7, #36]	; 0x24
 8003090:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003094:	4642      	mov	r2, r8
 8003096:	464b      	mov	r3, r9
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	0159      	lsls	r1, r3, #5
 80030a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030a6:	0150      	lsls	r0, r2, #5
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4641      	mov	r1, r8
 80030ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80030b2:	4649      	mov	r1, r9
 80030b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030cc:	ebb2 040a 	subs.w	r4, r2, sl
 80030d0:	eb63 050b 	sbc.w	r5, r3, fp
 80030d4:	f04f 0200 	mov.w	r2, #0
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	00eb      	lsls	r3, r5, #3
 80030de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030e2:	00e2      	lsls	r2, r4, #3
 80030e4:	4614      	mov	r4, r2
 80030e6:	461d      	mov	r5, r3
 80030e8:	4643      	mov	r3, r8
 80030ea:	18e3      	adds	r3, r4, r3
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	464b      	mov	r3, r9
 80030f0:	eb45 0303 	adc.w	r3, r5, r3
 80030f4:	607b      	str	r3, [r7, #4]
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003102:	4629      	mov	r1, r5
 8003104:	028b      	lsls	r3, r1, #10
 8003106:	4621      	mov	r1, r4
 8003108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800310c:	4621      	mov	r1, r4
 800310e:	028a      	lsls	r2, r1, #10
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	2200      	movs	r2, #0
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	61fa      	str	r2, [r7, #28]
 800311c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003120:	f7fd f8a6 	bl	8000270 <__aeabi_uldivmod>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4613      	mov	r3, r2
 800312a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800312c:	4b0b      	ldr	r3, [pc, #44]	; (800315c <HAL_RCC_GetSysClockFreq+0x200>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	3301      	adds	r3, #1
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800313c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800313e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003146:	e002      	b.n	800314e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <HAL_RCC_GetSysClockFreq+0x204>)
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800314c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800314e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003150:	4618      	mov	r0, r3
 8003152:	3750      	adds	r7, #80	; 0x50
 8003154:	46bd      	mov	sp, r7
 8003156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	00f42400 	.word	0x00f42400
 8003164:	007a1200 	.word	0x007a1200

08003168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800316c:	4b03      	ldr	r3, [pc, #12]	; (800317c <HAL_RCC_GetHCLKFreq+0x14>)
 800316e:	681b      	ldr	r3, [r3, #0]
}
 8003170:	4618      	mov	r0, r3
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000268 	.word	0x20000268

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003184:	f7ff fff0 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 8003188:	4602      	mov	r2, r0
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	0a9b      	lsrs	r3, r3, #10
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	4903      	ldr	r1, [pc, #12]	; (80031a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003196:	5ccb      	ldrb	r3, [r1, r3]
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40023800 	.word	0x40023800
 80031a4:	080058b0 	.word	0x080058b0

080031a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031ac:	f7ff ffdc 	bl	8003168 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0b5b      	lsrs	r3, r3, #13
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	080058b0 	.word	0x080058b0

080031d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e041      	b.n	8003266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fe fd30 	bl	8001c5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 fa92 	bl	8003738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	d001      	beq.n	8003288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e04e      	b.n	8003326 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <HAL_TIM_Base_Start_IT+0xc4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d022      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d01d      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1f      	ldr	r2, [pc, #124]	; (8003338 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d018      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1e      	ldr	r2, [pc, #120]	; (800333c <HAL_TIM_Base_Start_IT+0xcc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d013      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a1c      	ldr	r2, [pc, #112]	; (8003340 <HAL_TIM_Base_Start_IT+0xd0>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00e      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a1b      	ldr	r2, [pc, #108]	; (8003344 <HAL_TIM_Base_Start_IT+0xd4>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d009      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_TIM_Base_Start_IT+0xd8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d004      	beq.n	80032f0 <HAL_TIM_Base_Start_IT+0x80>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a18      	ldr	r2, [pc, #96]	; (800334c <HAL_TIM_Base_Start_IT+0xdc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d111      	bne.n	8003314 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b06      	cmp	r3, #6
 8003300:	d010      	beq.n	8003324 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003312:	e007      	b.n	8003324 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	40000400 	.word	0x40000400
 800333c:	40000800 	.word	0x40000800
 8003340:	40000c00 	.word	0x40000c00
 8003344:	40010400 	.word	0x40010400
 8003348:	40014000 	.word	0x40014000
 800334c:	40001800 	.word	0x40001800

08003350 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b02      	cmp	r3, #2
 8003364:	d122      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b02      	cmp	r3, #2
 8003372:	d11b      	bne.n	80033ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0202 	mvn.w	r2, #2
 800337c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9b2 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003398:	e005      	b.n	80033a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f9a4 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f9b5 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d122      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d11b      	bne.n	8003400 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0204 	mvn.w	r2, #4
 80033d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2202      	movs	r2, #2
 80033d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f988 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f97a 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f98b 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b08      	cmp	r3, #8
 800340c:	d122      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b08      	cmp	r3, #8
 800341a:	d11b      	bne.n	8003454 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0208 	mvn.w	r2, #8
 8003424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2204      	movs	r2, #4
 800342a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f95e 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003440:	e005      	b.n	800344e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f950 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f961 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b10      	cmp	r3, #16
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f934 	bl	80036fc <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f926 	bl	80036e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f937 	bl	8003710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d10e      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d107      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0201 	mvn.w	r2, #1
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fbfc 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034de:	2b80      	cmp	r3, #128	; 0x80
 80034e0:	d10e      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d107      	bne.n	8003500 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fadc 	bl	8003ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d10e      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003518:	2b40      	cmp	r3, #64	; 0x40
 800351a:	d107      	bne.n	800352c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f8fc 	bl	8003724 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b20      	cmp	r3, #32
 8003538:	d10e      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b20      	cmp	r3, #32
 8003546:	d107      	bne.n	8003558 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0220 	mvn.w	r2, #32
 8003550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 faa6 	bl	8003aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_TIM_ConfigClockSource+0x18>
 8003574:	2302      	movs	r3, #2
 8003576:	e0b3      	b.n	80036e0 <HAL_TIM_ConfigClockSource+0x180>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2202      	movs	r2, #2
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003596:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800359e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b0:	d03e      	beq.n	8003630 <HAL_TIM_ConfigClockSource+0xd0>
 80035b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035b6:	f200 8087 	bhi.w	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	f000 8085 	beq.w	80036cc <HAL_TIM_ConfigClockSource+0x16c>
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	d87f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035c8:	2b70      	cmp	r3, #112	; 0x70
 80035ca:	d01a      	beq.n	8003602 <HAL_TIM_ConfigClockSource+0xa2>
 80035cc:	2b70      	cmp	r3, #112	; 0x70
 80035ce:	d87b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035d0:	2b60      	cmp	r3, #96	; 0x60
 80035d2:	d050      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x116>
 80035d4:	2b60      	cmp	r3, #96	; 0x60
 80035d6:	d877      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035d8:	2b50      	cmp	r3, #80	; 0x50
 80035da:	d03c      	beq.n	8003656 <HAL_TIM_ConfigClockSource+0xf6>
 80035dc:	2b50      	cmp	r3, #80	; 0x50
 80035de:	d873      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035e0:	2b40      	cmp	r3, #64	; 0x40
 80035e2:	d058      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x136>
 80035e4:	2b40      	cmp	r3, #64	; 0x40
 80035e6:	d86f      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035e8:	2b30      	cmp	r3, #48	; 0x30
 80035ea:	d064      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
 80035ec:	2b30      	cmp	r3, #48	; 0x30
 80035ee:	d86b      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d060      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
 80035f4:	2b20      	cmp	r3, #32
 80035f6:	d867      	bhi.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d05c      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
 80035fc:	2b10      	cmp	r3, #16
 80035fe:	d05a      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003600:	e062      	b.n	80036c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6899      	ldr	r1, [r3, #8]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f000 f9ab 	bl	800396c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003624:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	609a      	str	r2, [r3, #8]
      break;
 800362e:	e04e      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	6899      	ldr	r1, [r3, #8]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f000 f994 	bl	800396c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003652:	609a      	str	r2, [r3, #8]
      break;
 8003654:	e03b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	461a      	mov	r2, r3
 8003664:	f000 f908 	bl	8003878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2150      	movs	r1, #80	; 0x50
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f961 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 8003674:	e02b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f000 f927 	bl	80038d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2160      	movs	r1, #96	; 0x60
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f951 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 8003694:	e01b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	461a      	mov	r2, r3
 80036a4:	f000 f8e8 	bl	8003878 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2140      	movs	r1, #64	; 0x40
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f941 	bl	8003936 <TIM_ITRx_SetConfig>
      break;
 80036b4:	e00b      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 f938 	bl	8003936 <TIM_ITRx_SetConfig>
        break;
 80036c6:	e002      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80036cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a40      	ldr	r2, [pc, #256]	; (800384c <TIM_Base_SetConfig+0x114>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003756:	d00f      	beq.n	8003778 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3d      	ldr	r2, [pc, #244]	; (8003850 <TIM_Base_SetConfig+0x118>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00b      	beq.n	8003778 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3c      	ldr	r2, [pc, #240]	; (8003854 <TIM_Base_SetConfig+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <TIM_Base_SetConfig+0x40>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a3b      	ldr	r2, [pc, #236]	; (8003858 <TIM_Base_SetConfig+0x120>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_Base_SetConfig+0x40>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a3a      	ldr	r2, [pc, #232]	; (800385c <TIM_Base_SetConfig+0x124>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d108      	bne.n	800378a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2f      	ldr	r2, [pc, #188]	; (800384c <TIM_Base_SetConfig+0x114>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d02b      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d027      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2c      	ldr	r2, [pc, #176]	; (8003850 <TIM_Base_SetConfig+0x118>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d023      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2b      	ldr	r2, [pc, #172]	; (8003854 <TIM_Base_SetConfig+0x11c>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01f      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2a      	ldr	r2, [pc, #168]	; (8003858 <TIM_Base_SetConfig+0x120>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01b      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a29      	ldr	r2, [pc, #164]	; (800385c <TIM_Base_SetConfig+0x124>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d017      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a28      	ldr	r2, [pc, #160]	; (8003860 <TIM_Base_SetConfig+0x128>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a27      	ldr	r2, [pc, #156]	; (8003864 <TIM_Base_SetConfig+0x12c>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00f      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a26      	ldr	r2, [pc, #152]	; (8003868 <TIM_Base_SetConfig+0x130>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00b      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a25      	ldr	r2, [pc, #148]	; (800386c <TIM_Base_SetConfig+0x134>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d007      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a24      	ldr	r2, [pc, #144]	; (8003870 <TIM_Base_SetConfig+0x138>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d003      	beq.n	80037ea <TIM_Base_SetConfig+0xb2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a23      	ldr	r2, [pc, #140]	; (8003874 <TIM_Base_SetConfig+0x13c>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d108      	bne.n	80037fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <TIM_Base_SetConfig+0x114>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d003      	beq.n	8003830 <TIM_Base_SetConfig+0xf8>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a0c      	ldr	r2, [pc, #48]	; (800385c <TIM_Base_SetConfig+0x124>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d103      	bne.n	8003838 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	615a      	str	r2, [r3, #20]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40010400 	.word	0x40010400
 8003860:	40014000 	.word	0x40014000
 8003864:	40014400 	.word	0x40014400
 8003868:	40014800 	.word	0x40014800
 800386c:	40001800 	.word	0x40001800
 8003870:	40001c00 	.word	0x40001c00
 8003874:	40002000 	.word	0x40002000

08003878 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a1b      	ldr	r3, [r3, #32]
 8003888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	f023 0201 	bic.w	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f023 030a 	bic.w	r3, r3, #10
 80038b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b087      	sub	sp, #28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f023 0210 	bic.w	r2, r3, #16
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003900:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	031b      	lsls	r3, r3, #12
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	4313      	orrs	r3, r2
 800390a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003912:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	011b      	lsls	r3, r3, #4
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003936:	b480      	push	{r7}
 8003938:	b085      	sub	sp, #20
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
 800393e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	f043 0307 	orr.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	609a      	str	r2, [r3, #8]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003986:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	021a      	lsls	r2, r3, #8
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	431a      	orrs	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	4313      	orrs	r3, r2
 8003994:	697a      	ldr	r2, [r7, #20]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	609a      	str	r2, [r3, #8]
}
 80039a0:	bf00      	nop
 80039a2:	371c      	adds	r7, #28
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d101      	bne.n	80039c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c0:	2302      	movs	r3, #2
 80039c2:	e05a      	b.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a10:	d01d      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d018      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a15      	ldr	r2, [pc, #84]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10c      	bne.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40010000 	.word	0x40010000
 8003a8c:	40000400 	.word	0x40000400
 8003a90:	40000800 	.word	0x40000800
 8003a94:	40000c00 	.word	0x40000c00
 8003a98:	40010400 	.word	0x40010400
 8003a9c:	40014000 	.word	0x40014000
 8003aa0:	40001800 	.word	0x40001800

08003aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e03f      	b.n	8003b5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fe f904 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fb3f 	bl	8004194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
	...

08003b68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	; 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10d      	bne.n	8003bba <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	f003 0320 	and.w	r3, r3, #32
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_UART_IRQHandler+0x52>
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	f003 0320 	and.w	r3, r3, #32
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa57 	bl	8004066 <UART_Receive_IT>
      return;
 8003bb8:	e17c      	b.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b1 	beq.w	8003d24 <HAL_UART_IRQHandler+0x1bc>
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_UART_IRQHandler+0x70>
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80a6 	beq.w	8003d24 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x90>
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	f043 0201 	orr.w	r2, r3, #1
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HAL_UART_IRQHandler+0xb0>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c10:	f043 0202 	orr.w	r2, r3, #2
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_UART_IRQHandler+0xd0>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c30:	f043 0204 	orr.w	r2, r3, #4
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00f      	beq.n	8003c62 <HAL_UART_IRQHandler+0xfa>
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <HAL_UART_IRQHandler+0xee>
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f043 0208 	orr.w	r2, r3, #8
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f000 811f 	beq.w	8003eaa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_UART_IRQHandler+0x11e>
 8003c76:	6a3b      	ldr	r3, [r7, #32]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f9f0 	bl	8004066 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	bf0c      	ite	eq
 8003c94:	2301      	moveq	r3, #1
 8003c96:	2300      	movne	r3, #0
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <HAL_UART_IRQHandler+0x146>
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d031      	beq.n	8003d12 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f930 	bl	8003f14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d123      	bne.n	8003d0a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cd0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d013      	beq.n	8003d02 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	4a77      	ldr	r2, [pc, #476]	; (8003ebc <HAL_UART_IRQHandler+0x354>)
 8003ce0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe faed 	bl	80022c6 <HAL_DMA_Abort_IT>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d016      	beq.n	8003d20 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d00:	e00e      	b.n	8003d20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f8f0 	bl	8003ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	e00a      	b.n	8003d20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8ec 	bl	8003ee8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d10:	e006      	b.n	8003d20 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 f8e8 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003d1e:	e0c4      	b.n	8003eaa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d20:	bf00      	nop
    return;
 8003d22:	e0c2      	b.n	8003eaa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f040 80a2 	bne.w	8003e72 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 809c 	beq.w	8003e72 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003d3a:	6a3b      	ldr	r3, [r7, #32]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8096 	beq.w	8003e72 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b40      	cmp	r3, #64	; 0x40
 8003d68:	d14f      	bne.n	8003e0a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003d74:	8a3b      	ldrh	r3, [r7, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 8099 	beq.w	8003eae <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d80:	8a3a      	ldrh	r2, [r7, #16]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	f080 8093 	bcs.w	8003eae <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8a3a      	ldrh	r2, [r7, #16]
 8003d8c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d98:	d02b      	beq.n	8003df2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68da      	ldr	r2, [r3, #12]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f022 0201 	bic.w	r2, r2, #1
 8003db8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dc8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0210 	bic.w	r2, r2, #16
 8003de6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fe f9fa 	bl	80021e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4619      	mov	r1, r3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f87a 	bl	8003efc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e08:	e051      	b.n	8003eae <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d047      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003e22:	8a7b      	ldrh	r3, [r7, #18]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d044      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e36:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0201 	bic.w	r2, r2, #1
 8003e46:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f022 0210 	bic.w	r2, r2, #16
 8003e64:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e66:	8a7b      	ldrh	r3, [r7, #18]
 8003e68:	4619      	mov	r1, r3
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f846 	bl	8003efc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003e70:	e01f      	b.n	8003eb2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d008      	beq.n	8003e8e <HAL_UART_IRQHandler+0x326>
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d003      	beq.n	8003e8e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f885 	bl	8003f96 <UART_Transmit_IT>
    return;
 8003e8c:	e012      	b.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f8c7 	bl	8004036 <UART_EndTransmit_IT>
    return;
 8003ea8:	e004      	b.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
    return;
 8003eaa:	bf00      	nop
 8003eac:	e002      	b.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
      return;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_UART_IRQHandler+0x34c>
      return;
 8003eb2:	bf00      	nop
  }
}
 8003eb4:	3728      	adds	r7, #40	; 0x28
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	08003f6f 	.word	0x08003f6f

08003ec0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f08:	bf00      	nop
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695a      	ldr	r2, [r3, #20]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0201 	bic.w	r2, r2, #1
 8003f3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d107      	bne.n	8003f54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f022 0210 	bic.w	r2, r2, #16
 8003f52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f7ff ffad 	bl	8003ee8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f8e:	bf00      	nop
 8003f90:	3710      	adds	r7, #16
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b085      	sub	sp, #20
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b21      	cmp	r3, #33	; 0x21
 8003fa8:	d13e      	bne.n	8004028 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d114      	bne.n	8003fde <UART_Transmit_IT+0x48>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d110      	bne.n	8003fde <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fd0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	621a      	str	r2, [r3, #32]
 8003fdc:	e008      	b.n	8003ff0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6211      	str	r1, [r2, #32]
 8003fe8:	781a      	ldrb	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004000:	2b00      	cmp	r3, #0
 8004002:	d10f      	bne.n	8004024 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004012:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004022:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004024:	2300      	movs	r3, #0
 8004026:	e000      	b.n	800402a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004028:	2302      	movs	r3, #2
  }
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800404c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff ff32 	bl	8003ec0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b22      	cmp	r3, #34	; 0x22
 8004078:	f040 8087 	bne.w	800418a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004084:	d117      	bne.n	80040b6 <UART_Receive_IT+0x50>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d113      	bne.n	80040b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800408e:	2300      	movs	r3, #0
 8004090:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ae:	1c9a      	adds	r2, r3, #2
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	; 0x28
 80040b4:	e026      	b.n	8004104 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80040bc:	2300      	movs	r3, #0
 80040be:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040c8:	d007      	beq.n	80040da <UART_Receive_IT+0x74>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <UART_Receive_IT+0x82>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d106      	bne.n	80040e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e008      	b.n	80040fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f4:	b2da      	uxtb	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29b      	uxth	r3, r3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	4619      	mov	r1, r3
 8004112:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004114:	2b00      	cmp	r3, #0
 8004116:	d136      	bne.n	8004186 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68da      	ldr	r2, [r3, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0220 	bic.w	r2, r2, #32
 8004126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68da      	ldr	r2, [r3, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004136:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695a      	ldr	r2, [r3, #20]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10e      	bne.n	8004176 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f022 0210 	bic.w	r2, r2, #16
 8004166:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff fec4 	bl	8003efc <HAL_UARTEx_RxEventCallback>
 8004174:	e002      	b.n	800417c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff feac 	bl	8003ed4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	e002      	b.n	800418c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	e000      	b.n	800418c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800418a:	2302      	movs	r3, #2
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004198:	b0c0      	sub	sp, #256	; 0x100
 800419a:	af00      	add	r7, sp, #0
 800419c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b0:	68d9      	ldr	r1, [r3, #12]
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	ea40 0301 	orr.w	r3, r0, r1
 80041bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041ec:	f021 010c 	bic.w	r1, r1, #12
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041fa:	430b      	orrs	r3, r1
 80041fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800420a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420e:	6999      	ldr	r1, [r3, #24]
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	ea40 0301 	orr.w	r3, r0, r1
 800421a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b8f      	ldr	r3, [pc, #572]	; (8004460 <UART_SetConfig+0x2cc>)
 8004224:	429a      	cmp	r2, r3
 8004226:	d005      	beq.n	8004234 <UART_SetConfig+0xa0>
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	4b8d      	ldr	r3, [pc, #564]	; (8004464 <UART_SetConfig+0x2d0>)
 8004230:	429a      	cmp	r2, r3
 8004232:	d104      	bne.n	800423e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004234:	f7fe ffb8 	bl	80031a8 <HAL_RCC_GetPCLK2Freq>
 8004238:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800423c:	e003      	b.n	8004246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800423e:	f7fe ff9f 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
 8004242:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004250:	f040 810c 	bne.w	800446c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800425e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004266:	4622      	mov	r2, r4
 8004268:	462b      	mov	r3, r5
 800426a:	1891      	adds	r1, r2, r2
 800426c:	65b9      	str	r1, [r7, #88]	; 0x58
 800426e:	415b      	adcs	r3, r3
 8004270:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004276:	4621      	mov	r1, r4
 8004278:	eb12 0801 	adds.w	r8, r2, r1
 800427c:	4629      	mov	r1, r5
 800427e:	eb43 0901 	adc.w	r9, r3, r1
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800428e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004296:	4690      	mov	r8, r2
 8004298:	4699      	mov	r9, r3
 800429a:	4623      	mov	r3, r4
 800429c:	eb18 0303 	adds.w	r3, r8, r3
 80042a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042a4:	462b      	mov	r3, r5
 80042a6:	eb49 0303 	adc.w	r3, r9, r3
 80042aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042c2:	460b      	mov	r3, r1
 80042c4:	18db      	adds	r3, r3, r3
 80042c6:	653b      	str	r3, [r7, #80]	; 0x50
 80042c8:	4613      	mov	r3, r2
 80042ca:	eb42 0303 	adc.w	r3, r2, r3
 80042ce:	657b      	str	r3, [r7, #84]	; 0x54
 80042d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042d8:	f7fb ffca 	bl	8000270 <__aeabi_uldivmod>
 80042dc:	4602      	mov	r2, r0
 80042de:	460b      	mov	r3, r1
 80042e0:	4b61      	ldr	r3, [pc, #388]	; (8004468 <UART_SetConfig+0x2d4>)
 80042e2:	fba3 2302 	umull	r2, r3, r3, r2
 80042e6:	095b      	lsrs	r3, r3, #5
 80042e8:	011c      	lsls	r4, r3, #4
 80042ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042fc:	4642      	mov	r2, r8
 80042fe:	464b      	mov	r3, r9
 8004300:	1891      	adds	r1, r2, r2
 8004302:	64b9      	str	r1, [r7, #72]	; 0x48
 8004304:	415b      	adcs	r3, r3
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800430c:	4641      	mov	r1, r8
 800430e:	eb12 0a01 	adds.w	sl, r2, r1
 8004312:	4649      	mov	r1, r9
 8004314:	eb43 0b01 	adc.w	fp, r3, r1
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	f04f 0300 	mov.w	r3, #0
 8004320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800432c:	4692      	mov	sl, r2
 800432e:	469b      	mov	fp, r3
 8004330:	4643      	mov	r3, r8
 8004332:	eb1a 0303 	adds.w	r3, sl, r3
 8004336:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800433a:	464b      	mov	r3, r9
 800433c:	eb4b 0303 	adc.w	r3, fp, r3
 8004340:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004350:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004358:	460b      	mov	r3, r1
 800435a:	18db      	adds	r3, r3, r3
 800435c:	643b      	str	r3, [r7, #64]	; 0x40
 800435e:	4613      	mov	r3, r2
 8004360:	eb42 0303 	adc.w	r3, r2, r3
 8004364:	647b      	str	r3, [r7, #68]	; 0x44
 8004366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800436a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800436e:	f7fb ff7f 	bl	8000270 <__aeabi_uldivmod>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4611      	mov	r1, r2
 8004378:	4b3b      	ldr	r3, [pc, #236]	; (8004468 <UART_SetConfig+0x2d4>)
 800437a:	fba3 2301 	umull	r2, r3, r3, r1
 800437e:	095b      	lsrs	r3, r3, #5
 8004380:	2264      	movs	r2, #100	; 0x64
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	1acb      	subs	r3, r1, r3
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800438e:	4b36      	ldr	r3, [pc, #216]	; (8004468 <UART_SetConfig+0x2d4>)
 8004390:	fba3 2302 	umull	r2, r3, r3, r2
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800439c:	441c      	add	r4, r3
 800439e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80043b8:	415b      	adcs	r3, r3
 80043ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c0:	4641      	mov	r1, r8
 80043c2:	1851      	adds	r1, r2, r1
 80043c4:	6339      	str	r1, [r7, #48]	; 0x30
 80043c6:	4649      	mov	r1, r9
 80043c8:	414b      	adcs	r3, r1
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043d8:	4659      	mov	r1, fp
 80043da:	00cb      	lsls	r3, r1, #3
 80043dc:	4651      	mov	r1, sl
 80043de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043e2:	4651      	mov	r1, sl
 80043e4:	00ca      	lsls	r2, r1, #3
 80043e6:	4610      	mov	r0, r2
 80043e8:	4619      	mov	r1, r3
 80043ea:	4603      	mov	r3, r0
 80043ec:	4642      	mov	r2, r8
 80043ee:	189b      	adds	r3, r3, r2
 80043f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043f4:	464b      	mov	r3, r9
 80043f6:	460a      	mov	r2, r1
 80043f8:	eb42 0303 	adc.w	r3, r2, r3
 80043fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800440c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004414:	460b      	mov	r3, r1
 8004416:	18db      	adds	r3, r3, r3
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
 800441a:	4613      	mov	r3, r2
 800441c:	eb42 0303 	adc.w	r3, r2, r3
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800442a:	f7fb ff21 	bl	8000270 <__aeabi_uldivmod>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	4b0d      	ldr	r3, [pc, #52]	; (8004468 <UART_SetConfig+0x2d4>)
 8004434:	fba3 1302 	umull	r1, r3, r3, r2
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	2164      	movs	r1, #100	; 0x64
 800443c:	fb01 f303 	mul.w	r3, r1, r3
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	3332      	adds	r3, #50	; 0x32
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <UART_SetConfig+0x2d4>)
 8004448:	fba2 2303 	umull	r2, r3, r2, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	f003 0207 	and.w	r2, r3, #7
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4422      	add	r2, r4
 800445a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800445c:	e105      	b.n	800466a <UART_SetConfig+0x4d6>
 800445e:	bf00      	nop
 8004460:	40011000 	.word	0x40011000
 8004464:	40011400 	.word	0x40011400
 8004468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800446c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004470:	2200      	movs	r2, #0
 8004472:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004476:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800447a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800447e:	4642      	mov	r2, r8
 8004480:	464b      	mov	r3, r9
 8004482:	1891      	adds	r1, r2, r2
 8004484:	6239      	str	r1, [r7, #32]
 8004486:	415b      	adcs	r3, r3
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800448e:	4641      	mov	r1, r8
 8004490:	1854      	adds	r4, r2, r1
 8004492:	4649      	mov	r1, r9
 8004494:	eb43 0501 	adc.w	r5, r3, r1
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	f04f 0300 	mov.w	r3, #0
 80044a0:	00eb      	lsls	r3, r5, #3
 80044a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044a6:	00e2      	lsls	r2, r4, #3
 80044a8:	4614      	mov	r4, r2
 80044aa:	461d      	mov	r5, r3
 80044ac:	4643      	mov	r3, r8
 80044ae:	18e3      	adds	r3, r4, r3
 80044b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044b4:	464b      	mov	r3, r9
 80044b6:	eb45 0303 	adc.w	r3, r5, r3
 80044ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044da:	4629      	mov	r1, r5
 80044dc:	008b      	lsls	r3, r1, #2
 80044de:	4621      	mov	r1, r4
 80044e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e4:	4621      	mov	r1, r4
 80044e6:	008a      	lsls	r2, r1, #2
 80044e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044ec:	f7fb fec0 	bl	8000270 <__aeabi_uldivmod>
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4b60      	ldr	r3, [pc, #384]	; (8004678 <UART_SetConfig+0x4e4>)
 80044f6:	fba3 2302 	umull	r2, r3, r3, r2
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	011c      	lsls	r4, r3, #4
 80044fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800450c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004510:	4642      	mov	r2, r8
 8004512:	464b      	mov	r3, r9
 8004514:	1891      	adds	r1, r2, r2
 8004516:	61b9      	str	r1, [r7, #24]
 8004518:	415b      	adcs	r3, r3
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004520:	4641      	mov	r1, r8
 8004522:	1851      	adds	r1, r2, r1
 8004524:	6139      	str	r1, [r7, #16]
 8004526:	4649      	mov	r1, r9
 8004528:	414b      	adcs	r3, r1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	f04f 0200 	mov.w	r2, #0
 8004530:	f04f 0300 	mov.w	r3, #0
 8004534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004538:	4659      	mov	r1, fp
 800453a:	00cb      	lsls	r3, r1, #3
 800453c:	4651      	mov	r1, sl
 800453e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004542:	4651      	mov	r1, sl
 8004544:	00ca      	lsls	r2, r1, #3
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	4603      	mov	r3, r0
 800454c:	4642      	mov	r2, r8
 800454e:	189b      	adds	r3, r3, r2
 8004550:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004554:	464b      	mov	r3, r9
 8004556:	460a      	mov	r2, r1
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	67bb      	str	r3, [r7, #120]	; 0x78
 800456a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004578:	4649      	mov	r1, r9
 800457a:	008b      	lsls	r3, r1, #2
 800457c:	4641      	mov	r1, r8
 800457e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004582:	4641      	mov	r1, r8
 8004584:	008a      	lsls	r2, r1, #2
 8004586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800458a:	f7fb fe71 	bl	8000270 <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4b39      	ldr	r3, [pc, #228]	; (8004678 <UART_SetConfig+0x4e4>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a34      	ldr	r2, [pc, #208]	; (8004678 <UART_SetConfig+0x4e4>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b2:	441c      	add	r4, r3
 80045b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b8:	2200      	movs	r2, #0
 80045ba:	673b      	str	r3, [r7, #112]	; 0x70
 80045bc:	677a      	str	r2, [r7, #116]	; 0x74
 80045be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045c2:	4642      	mov	r2, r8
 80045c4:	464b      	mov	r3, r9
 80045c6:	1891      	adds	r1, r2, r2
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	415b      	adcs	r3, r3
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045d2:	4641      	mov	r1, r8
 80045d4:	1851      	adds	r1, r2, r1
 80045d6:	6039      	str	r1, [r7, #0]
 80045d8:	4649      	mov	r1, r9
 80045da:	414b      	adcs	r3, r1
 80045dc:	607b      	str	r3, [r7, #4]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045ea:	4659      	mov	r1, fp
 80045ec:	00cb      	lsls	r3, r1, #3
 80045ee:	4651      	mov	r1, sl
 80045f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f4:	4651      	mov	r1, sl
 80045f6:	00ca      	lsls	r2, r1, #3
 80045f8:	4610      	mov	r0, r2
 80045fa:	4619      	mov	r1, r3
 80045fc:	4603      	mov	r3, r0
 80045fe:	4642      	mov	r2, r8
 8004600:	189b      	adds	r3, r3, r2
 8004602:	66bb      	str	r3, [r7, #104]	; 0x68
 8004604:	464b      	mov	r3, r9
 8004606:	460a      	mov	r2, r1
 8004608:	eb42 0303 	adc.w	r3, r2, r3
 800460c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	663b      	str	r3, [r7, #96]	; 0x60
 8004618:	667a      	str	r2, [r7, #100]	; 0x64
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004626:	4649      	mov	r1, r9
 8004628:	008b      	lsls	r3, r1, #2
 800462a:	4641      	mov	r1, r8
 800462c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004630:	4641      	mov	r1, r8
 8004632:	008a      	lsls	r2, r1, #2
 8004634:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004638:	f7fb fe1a 	bl	8000270 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <UART_SetConfig+0x4e4>)
 8004642:	fba3 1302 	umull	r1, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2164      	movs	r1, #100	; 0x64
 800464a:	fb01 f303 	mul.w	r3, r1, r3
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	3332      	adds	r3, #50	; 0x32
 8004654:	4a08      	ldr	r2, [pc, #32]	; (8004678 <UART_SetConfig+0x4e4>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	f003 020f 	and.w	r2, r3, #15
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4422      	add	r2, r4
 8004668:	609a      	str	r2, [r3, #8]
}
 800466a:	bf00      	nop
 800466c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004670:	46bd      	mov	sp, r7
 8004672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004676:	bf00      	nop
 8004678:	51eb851f 	.word	0x51eb851f

0800467c <__errno>:
 800467c:	4b01      	ldr	r3, [pc, #4]	; (8004684 <__errno+0x8>)
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	20000274 	.word	0x20000274

08004688 <__libc_init_array>:
 8004688:	b570      	push	{r4, r5, r6, lr}
 800468a:	4d0d      	ldr	r5, [pc, #52]	; (80046c0 <__libc_init_array+0x38>)
 800468c:	4c0d      	ldr	r4, [pc, #52]	; (80046c4 <__libc_init_array+0x3c>)
 800468e:	1b64      	subs	r4, r4, r5
 8004690:	10a4      	asrs	r4, r4, #2
 8004692:	2600      	movs	r6, #0
 8004694:	42a6      	cmp	r6, r4
 8004696:	d109      	bne.n	80046ac <__libc_init_array+0x24>
 8004698:	4d0b      	ldr	r5, [pc, #44]	; (80046c8 <__libc_init_array+0x40>)
 800469a:	4c0c      	ldr	r4, [pc, #48]	; (80046cc <__libc_init_array+0x44>)
 800469c:	f000 fcc2 	bl	8005024 <_init>
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	2600      	movs	r6, #0
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	d105      	bne.n	80046b6 <__libc_init_array+0x2e>
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b0:	4798      	blx	r3
 80046b2:	3601      	adds	r6, #1
 80046b4:	e7ee      	b.n	8004694 <__libc_init_array+0xc>
 80046b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ba:	4798      	blx	r3
 80046bc:	3601      	adds	r6, #1
 80046be:	e7f2      	b.n	80046a6 <__libc_init_array+0x1e>
 80046c0:	080058f4 	.word	0x080058f4
 80046c4:	080058f4 	.word	0x080058f4
 80046c8:	080058f4 	.word	0x080058f4
 80046cc:	080058f8 	.word	0x080058f8

080046d0 <memset>:
 80046d0:	4402      	add	r2, r0
 80046d2:	4603      	mov	r3, r0
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d100      	bne.n	80046da <memset+0xa>
 80046d8:	4770      	bx	lr
 80046da:	f803 1b01 	strb.w	r1, [r3], #1
 80046de:	e7f9      	b.n	80046d4 <memset+0x4>

080046e0 <sniprintf>:
 80046e0:	b40c      	push	{r2, r3}
 80046e2:	b530      	push	{r4, r5, lr}
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <sniprintf+0x64>)
 80046e6:	1e0c      	subs	r4, r1, #0
 80046e8:	681d      	ldr	r5, [r3, #0]
 80046ea:	b09d      	sub	sp, #116	; 0x74
 80046ec:	da08      	bge.n	8004700 <sniprintf+0x20>
 80046ee:	238b      	movs	r3, #139	; 0x8b
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295
 80046f6:	b01d      	add	sp, #116	; 0x74
 80046f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046fc:	b002      	add	sp, #8
 80046fe:	4770      	bx	lr
 8004700:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004704:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004708:	bf14      	ite	ne
 800470a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800470e:	4623      	moveq	r3, r4
 8004710:	9304      	str	r3, [sp, #16]
 8004712:	9307      	str	r3, [sp, #28]
 8004714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	9006      	str	r0, [sp, #24]
 800471c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004720:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004722:	ab21      	add	r3, sp, #132	; 0x84
 8004724:	a902      	add	r1, sp, #8
 8004726:	4628      	mov	r0, r5
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	f000 f889 	bl	8004840 <_svfiprintf_r>
 800472e:	1c43      	adds	r3, r0, #1
 8004730:	bfbc      	itt	lt
 8004732:	238b      	movlt	r3, #139	; 0x8b
 8004734:	602b      	strlt	r3, [r5, #0]
 8004736:	2c00      	cmp	r4, #0
 8004738:	d0dd      	beq.n	80046f6 <sniprintf+0x16>
 800473a:	9b02      	ldr	r3, [sp, #8]
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
 8004740:	e7d9      	b.n	80046f6 <sniprintf+0x16>
 8004742:	bf00      	nop
 8004744:	20000274 	.word	0x20000274

08004748 <siprintf>:
 8004748:	b40e      	push	{r1, r2, r3}
 800474a:	b500      	push	{lr}
 800474c:	b09c      	sub	sp, #112	; 0x70
 800474e:	ab1d      	add	r3, sp, #116	; 0x74
 8004750:	9002      	str	r0, [sp, #8]
 8004752:	9006      	str	r0, [sp, #24]
 8004754:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004758:	4809      	ldr	r0, [pc, #36]	; (8004780 <siprintf+0x38>)
 800475a:	9107      	str	r1, [sp, #28]
 800475c:	9104      	str	r1, [sp, #16]
 800475e:	4909      	ldr	r1, [pc, #36]	; (8004784 <siprintf+0x3c>)
 8004760:	f853 2b04 	ldr.w	r2, [r3], #4
 8004764:	9105      	str	r1, [sp, #20]
 8004766:	6800      	ldr	r0, [r0, #0]
 8004768:	9301      	str	r3, [sp, #4]
 800476a:	a902      	add	r1, sp, #8
 800476c:	f000 f868 	bl	8004840 <_svfiprintf_r>
 8004770:	9b02      	ldr	r3, [sp, #8]
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	b01c      	add	sp, #112	; 0x70
 8004778:	f85d eb04 	ldr.w	lr, [sp], #4
 800477c:	b003      	add	sp, #12
 800477e:	4770      	bx	lr
 8004780:	20000274 	.word	0x20000274
 8004784:	ffff0208 	.word	0xffff0208

08004788 <__ssputs_r>:
 8004788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800478c:	688e      	ldr	r6, [r1, #8]
 800478e:	429e      	cmp	r6, r3
 8004790:	4682      	mov	sl, r0
 8004792:	460c      	mov	r4, r1
 8004794:	4690      	mov	r8, r2
 8004796:	461f      	mov	r7, r3
 8004798:	d838      	bhi.n	800480c <__ssputs_r+0x84>
 800479a:	898a      	ldrh	r2, [r1, #12]
 800479c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047a0:	d032      	beq.n	8004808 <__ssputs_r+0x80>
 80047a2:	6825      	ldr	r5, [r4, #0]
 80047a4:	6909      	ldr	r1, [r1, #16]
 80047a6:	eba5 0901 	sub.w	r9, r5, r1
 80047aa:	6965      	ldr	r5, [r4, #20]
 80047ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047b4:	3301      	adds	r3, #1
 80047b6:	444b      	add	r3, r9
 80047b8:	106d      	asrs	r5, r5, #1
 80047ba:	429d      	cmp	r5, r3
 80047bc:	bf38      	it	cc
 80047be:	461d      	movcc	r5, r3
 80047c0:	0553      	lsls	r3, r2, #21
 80047c2:	d531      	bpl.n	8004828 <__ssputs_r+0xa0>
 80047c4:	4629      	mov	r1, r5
 80047c6:	f000 fb63 	bl	8004e90 <_malloc_r>
 80047ca:	4606      	mov	r6, r0
 80047cc:	b950      	cbnz	r0, 80047e4 <__ssputs_r+0x5c>
 80047ce:	230c      	movs	r3, #12
 80047d0:	f8ca 3000 	str.w	r3, [sl]
 80047d4:	89a3      	ldrh	r3, [r4, #12]
 80047d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e4:	6921      	ldr	r1, [r4, #16]
 80047e6:	464a      	mov	r2, r9
 80047e8:	f000 fabe 	bl	8004d68 <memcpy>
 80047ec:	89a3      	ldrh	r3, [r4, #12]
 80047ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80047f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	6126      	str	r6, [r4, #16]
 80047fa:	6165      	str	r5, [r4, #20]
 80047fc:	444e      	add	r6, r9
 80047fe:	eba5 0509 	sub.w	r5, r5, r9
 8004802:	6026      	str	r6, [r4, #0]
 8004804:	60a5      	str	r5, [r4, #8]
 8004806:	463e      	mov	r6, r7
 8004808:	42be      	cmp	r6, r7
 800480a:	d900      	bls.n	800480e <__ssputs_r+0x86>
 800480c:	463e      	mov	r6, r7
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	4632      	mov	r2, r6
 8004812:	4641      	mov	r1, r8
 8004814:	f000 fab6 	bl	8004d84 <memmove>
 8004818:	68a3      	ldr	r3, [r4, #8]
 800481a:	1b9b      	subs	r3, r3, r6
 800481c:	60a3      	str	r3, [r4, #8]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	4433      	add	r3, r6
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	2000      	movs	r0, #0
 8004826:	e7db      	b.n	80047e0 <__ssputs_r+0x58>
 8004828:	462a      	mov	r2, r5
 800482a:	f000 fba5 	bl	8004f78 <_realloc_r>
 800482e:	4606      	mov	r6, r0
 8004830:	2800      	cmp	r0, #0
 8004832:	d1e1      	bne.n	80047f8 <__ssputs_r+0x70>
 8004834:	6921      	ldr	r1, [r4, #16]
 8004836:	4650      	mov	r0, sl
 8004838:	f000 fabe 	bl	8004db8 <_free_r>
 800483c:	e7c7      	b.n	80047ce <__ssputs_r+0x46>
	...

08004840 <_svfiprintf_r>:
 8004840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004844:	4698      	mov	r8, r3
 8004846:	898b      	ldrh	r3, [r1, #12]
 8004848:	061b      	lsls	r3, r3, #24
 800484a:	b09d      	sub	sp, #116	; 0x74
 800484c:	4607      	mov	r7, r0
 800484e:	460d      	mov	r5, r1
 8004850:	4614      	mov	r4, r2
 8004852:	d50e      	bpl.n	8004872 <_svfiprintf_r+0x32>
 8004854:	690b      	ldr	r3, [r1, #16]
 8004856:	b963      	cbnz	r3, 8004872 <_svfiprintf_r+0x32>
 8004858:	2140      	movs	r1, #64	; 0x40
 800485a:	f000 fb19 	bl	8004e90 <_malloc_r>
 800485e:	6028      	str	r0, [r5, #0]
 8004860:	6128      	str	r0, [r5, #16]
 8004862:	b920      	cbnz	r0, 800486e <_svfiprintf_r+0x2e>
 8004864:	230c      	movs	r3, #12
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	f04f 30ff 	mov.w	r0, #4294967295
 800486c:	e0d1      	b.n	8004a12 <_svfiprintf_r+0x1d2>
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	616b      	str	r3, [r5, #20]
 8004872:	2300      	movs	r3, #0
 8004874:	9309      	str	r3, [sp, #36]	; 0x24
 8004876:	2320      	movs	r3, #32
 8004878:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800487c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004880:	2330      	movs	r3, #48	; 0x30
 8004882:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a2c <_svfiprintf_r+0x1ec>
 8004886:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800488a:	f04f 0901 	mov.w	r9, #1
 800488e:	4623      	mov	r3, r4
 8004890:	469a      	mov	sl, r3
 8004892:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004896:	b10a      	cbz	r2, 800489c <_svfiprintf_r+0x5c>
 8004898:	2a25      	cmp	r2, #37	; 0x25
 800489a:	d1f9      	bne.n	8004890 <_svfiprintf_r+0x50>
 800489c:	ebba 0b04 	subs.w	fp, sl, r4
 80048a0:	d00b      	beq.n	80048ba <_svfiprintf_r+0x7a>
 80048a2:	465b      	mov	r3, fp
 80048a4:	4622      	mov	r2, r4
 80048a6:	4629      	mov	r1, r5
 80048a8:	4638      	mov	r0, r7
 80048aa:	f7ff ff6d 	bl	8004788 <__ssputs_r>
 80048ae:	3001      	adds	r0, #1
 80048b0:	f000 80aa 	beq.w	8004a08 <_svfiprintf_r+0x1c8>
 80048b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048b6:	445a      	add	r2, fp
 80048b8:	9209      	str	r2, [sp, #36]	; 0x24
 80048ba:	f89a 3000 	ldrb.w	r3, [sl]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80a2 	beq.w	8004a08 <_svfiprintf_r+0x1c8>
 80048c4:	2300      	movs	r3, #0
 80048c6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ce:	f10a 0a01 	add.w	sl, sl, #1
 80048d2:	9304      	str	r3, [sp, #16]
 80048d4:	9307      	str	r3, [sp, #28]
 80048d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048da:	931a      	str	r3, [sp, #104]	; 0x68
 80048dc:	4654      	mov	r4, sl
 80048de:	2205      	movs	r2, #5
 80048e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e4:	4851      	ldr	r0, [pc, #324]	; (8004a2c <_svfiprintf_r+0x1ec>)
 80048e6:	f7fb fc73 	bl	80001d0 <memchr>
 80048ea:	9a04      	ldr	r2, [sp, #16]
 80048ec:	b9d8      	cbnz	r0, 8004926 <_svfiprintf_r+0xe6>
 80048ee:	06d0      	lsls	r0, r2, #27
 80048f0:	bf44      	itt	mi
 80048f2:	2320      	movmi	r3, #32
 80048f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f8:	0711      	lsls	r1, r2, #28
 80048fa:	bf44      	itt	mi
 80048fc:	232b      	movmi	r3, #43	; 0x2b
 80048fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004902:	f89a 3000 	ldrb.w	r3, [sl]
 8004906:	2b2a      	cmp	r3, #42	; 0x2a
 8004908:	d015      	beq.n	8004936 <_svfiprintf_r+0xf6>
 800490a:	9a07      	ldr	r2, [sp, #28]
 800490c:	4654      	mov	r4, sl
 800490e:	2000      	movs	r0, #0
 8004910:	f04f 0c0a 	mov.w	ip, #10
 8004914:	4621      	mov	r1, r4
 8004916:	f811 3b01 	ldrb.w	r3, [r1], #1
 800491a:	3b30      	subs	r3, #48	; 0x30
 800491c:	2b09      	cmp	r3, #9
 800491e:	d94e      	bls.n	80049be <_svfiprintf_r+0x17e>
 8004920:	b1b0      	cbz	r0, 8004950 <_svfiprintf_r+0x110>
 8004922:	9207      	str	r2, [sp, #28]
 8004924:	e014      	b.n	8004950 <_svfiprintf_r+0x110>
 8004926:	eba0 0308 	sub.w	r3, r0, r8
 800492a:	fa09 f303 	lsl.w	r3, r9, r3
 800492e:	4313      	orrs	r3, r2
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	46a2      	mov	sl, r4
 8004934:	e7d2      	b.n	80048dc <_svfiprintf_r+0x9c>
 8004936:	9b03      	ldr	r3, [sp, #12]
 8004938:	1d19      	adds	r1, r3, #4
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	9103      	str	r1, [sp, #12]
 800493e:	2b00      	cmp	r3, #0
 8004940:	bfbb      	ittet	lt
 8004942:	425b      	neglt	r3, r3
 8004944:	f042 0202 	orrlt.w	r2, r2, #2
 8004948:	9307      	strge	r3, [sp, #28]
 800494a:	9307      	strlt	r3, [sp, #28]
 800494c:	bfb8      	it	lt
 800494e:	9204      	strlt	r2, [sp, #16]
 8004950:	7823      	ldrb	r3, [r4, #0]
 8004952:	2b2e      	cmp	r3, #46	; 0x2e
 8004954:	d10c      	bne.n	8004970 <_svfiprintf_r+0x130>
 8004956:	7863      	ldrb	r3, [r4, #1]
 8004958:	2b2a      	cmp	r3, #42	; 0x2a
 800495a:	d135      	bne.n	80049c8 <_svfiprintf_r+0x188>
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	1d1a      	adds	r2, r3, #4
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	9203      	str	r2, [sp, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	bfb8      	it	lt
 8004968:	f04f 33ff 	movlt.w	r3, #4294967295
 800496c:	3402      	adds	r4, #2
 800496e:	9305      	str	r3, [sp, #20]
 8004970:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a3c <_svfiprintf_r+0x1fc>
 8004974:	7821      	ldrb	r1, [r4, #0]
 8004976:	2203      	movs	r2, #3
 8004978:	4650      	mov	r0, sl
 800497a:	f7fb fc29 	bl	80001d0 <memchr>
 800497e:	b140      	cbz	r0, 8004992 <_svfiprintf_r+0x152>
 8004980:	2340      	movs	r3, #64	; 0x40
 8004982:	eba0 000a 	sub.w	r0, r0, sl
 8004986:	fa03 f000 	lsl.w	r0, r3, r0
 800498a:	9b04      	ldr	r3, [sp, #16]
 800498c:	4303      	orrs	r3, r0
 800498e:	3401      	adds	r4, #1
 8004990:	9304      	str	r3, [sp, #16]
 8004992:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004996:	4826      	ldr	r0, [pc, #152]	; (8004a30 <_svfiprintf_r+0x1f0>)
 8004998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800499c:	2206      	movs	r2, #6
 800499e:	f7fb fc17 	bl	80001d0 <memchr>
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d038      	beq.n	8004a18 <_svfiprintf_r+0x1d8>
 80049a6:	4b23      	ldr	r3, [pc, #140]	; (8004a34 <_svfiprintf_r+0x1f4>)
 80049a8:	bb1b      	cbnz	r3, 80049f2 <_svfiprintf_r+0x1b2>
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	3307      	adds	r3, #7
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	3308      	adds	r3, #8
 80049b4:	9303      	str	r3, [sp, #12]
 80049b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b8:	4433      	add	r3, r6
 80049ba:	9309      	str	r3, [sp, #36]	; 0x24
 80049bc:	e767      	b.n	800488e <_svfiprintf_r+0x4e>
 80049be:	fb0c 3202 	mla	r2, ip, r2, r3
 80049c2:	460c      	mov	r4, r1
 80049c4:	2001      	movs	r0, #1
 80049c6:	e7a5      	b.n	8004914 <_svfiprintf_r+0xd4>
 80049c8:	2300      	movs	r3, #0
 80049ca:	3401      	adds	r4, #1
 80049cc:	9305      	str	r3, [sp, #20]
 80049ce:	4619      	mov	r1, r3
 80049d0:	f04f 0c0a 	mov.w	ip, #10
 80049d4:	4620      	mov	r0, r4
 80049d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049da:	3a30      	subs	r2, #48	; 0x30
 80049dc:	2a09      	cmp	r2, #9
 80049de:	d903      	bls.n	80049e8 <_svfiprintf_r+0x1a8>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0c5      	beq.n	8004970 <_svfiprintf_r+0x130>
 80049e4:	9105      	str	r1, [sp, #20]
 80049e6:	e7c3      	b.n	8004970 <_svfiprintf_r+0x130>
 80049e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ec:	4604      	mov	r4, r0
 80049ee:	2301      	movs	r3, #1
 80049f0:	e7f0      	b.n	80049d4 <_svfiprintf_r+0x194>
 80049f2:	ab03      	add	r3, sp, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	462a      	mov	r2, r5
 80049f8:	4b0f      	ldr	r3, [pc, #60]	; (8004a38 <_svfiprintf_r+0x1f8>)
 80049fa:	a904      	add	r1, sp, #16
 80049fc:	4638      	mov	r0, r7
 80049fe:	f3af 8000 	nop.w
 8004a02:	1c42      	adds	r2, r0, #1
 8004a04:	4606      	mov	r6, r0
 8004a06:	d1d6      	bne.n	80049b6 <_svfiprintf_r+0x176>
 8004a08:	89ab      	ldrh	r3, [r5, #12]
 8004a0a:	065b      	lsls	r3, r3, #25
 8004a0c:	f53f af2c 	bmi.w	8004868 <_svfiprintf_r+0x28>
 8004a10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a12:	b01d      	add	sp, #116	; 0x74
 8004a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a18:	ab03      	add	r3, sp, #12
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	462a      	mov	r2, r5
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <_svfiprintf_r+0x1f8>)
 8004a20:	a904      	add	r1, sp, #16
 8004a22:	4638      	mov	r0, r7
 8004a24:	f000 f87a 	bl	8004b1c <_printf_i>
 8004a28:	e7eb      	b.n	8004a02 <_svfiprintf_r+0x1c2>
 8004a2a:	bf00      	nop
 8004a2c:	080058b8 	.word	0x080058b8
 8004a30:	080058c2 	.word	0x080058c2
 8004a34:	00000000 	.word	0x00000000
 8004a38:	08004789 	.word	0x08004789
 8004a3c:	080058be 	.word	0x080058be

08004a40 <_printf_common>:
 8004a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a44:	4616      	mov	r6, r2
 8004a46:	4699      	mov	r9, r3
 8004a48:	688a      	ldr	r2, [r1, #8]
 8004a4a:	690b      	ldr	r3, [r1, #16]
 8004a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a50:	4293      	cmp	r3, r2
 8004a52:	bfb8      	it	lt
 8004a54:	4613      	movlt	r3, r2
 8004a56:	6033      	str	r3, [r6, #0]
 8004a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a5c:	4607      	mov	r7, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	b10a      	cbz	r2, 8004a66 <_printf_common+0x26>
 8004a62:	3301      	adds	r3, #1
 8004a64:	6033      	str	r3, [r6, #0]
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	0699      	lsls	r1, r3, #26
 8004a6a:	bf42      	ittt	mi
 8004a6c:	6833      	ldrmi	r3, [r6, #0]
 8004a6e:	3302      	addmi	r3, #2
 8004a70:	6033      	strmi	r3, [r6, #0]
 8004a72:	6825      	ldr	r5, [r4, #0]
 8004a74:	f015 0506 	ands.w	r5, r5, #6
 8004a78:	d106      	bne.n	8004a88 <_printf_common+0x48>
 8004a7a:	f104 0a19 	add.w	sl, r4, #25
 8004a7e:	68e3      	ldr	r3, [r4, #12]
 8004a80:	6832      	ldr	r2, [r6, #0]
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	42ab      	cmp	r3, r5
 8004a86:	dc26      	bgt.n	8004ad6 <_printf_common+0x96>
 8004a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a8c:	1e13      	subs	r3, r2, #0
 8004a8e:	6822      	ldr	r2, [r4, #0]
 8004a90:	bf18      	it	ne
 8004a92:	2301      	movne	r3, #1
 8004a94:	0692      	lsls	r2, r2, #26
 8004a96:	d42b      	bmi.n	8004af0 <_printf_common+0xb0>
 8004a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a9c:	4649      	mov	r1, r9
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c0      	blx	r8
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	d01e      	beq.n	8004ae4 <_printf_common+0xa4>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	68e5      	ldr	r5, [r4, #12]
 8004aaa:	6832      	ldr	r2, [r6, #0]
 8004aac:	f003 0306 	and.w	r3, r3, #6
 8004ab0:	2b04      	cmp	r3, #4
 8004ab2:	bf08      	it	eq
 8004ab4:	1aad      	subeq	r5, r5, r2
 8004ab6:	68a3      	ldr	r3, [r4, #8]
 8004ab8:	6922      	ldr	r2, [r4, #16]
 8004aba:	bf0c      	ite	eq
 8004abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac0:	2500      	movne	r5, #0
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	bfc4      	itt	gt
 8004ac6:	1a9b      	subgt	r3, r3, r2
 8004ac8:	18ed      	addgt	r5, r5, r3
 8004aca:	2600      	movs	r6, #0
 8004acc:	341a      	adds	r4, #26
 8004ace:	42b5      	cmp	r5, r6
 8004ad0:	d11a      	bne.n	8004b08 <_printf_common+0xc8>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	e008      	b.n	8004ae8 <_printf_common+0xa8>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	4652      	mov	r2, sl
 8004ada:	4649      	mov	r1, r9
 8004adc:	4638      	mov	r0, r7
 8004ade:	47c0      	blx	r8
 8004ae0:	3001      	adds	r0, #1
 8004ae2:	d103      	bne.n	8004aec <_printf_common+0xac>
 8004ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	3501      	adds	r5, #1
 8004aee:	e7c6      	b.n	8004a7e <_printf_common+0x3e>
 8004af0:	18e1      	adds	r1, r4, r3
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	2030      	movs	r0, #48	; 0x30
 8004af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004afa:	4422      	add	r2, r4
 8004afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b04:	3302      	adds	r3, #2
 8004b06:	e7c7      	b.n	8004a98 <_printf_common+0x58>
 8004b08:	2301      	movs	r3, #1
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	4649      	mov	r1, r9
 8004b0e:	4638      	mov	r0, r7
 8004b10:	47c0      	blx	r8
 8004b12:	3001      	adds	r0, #1
 8004b14:	d0e6      	beq.n	8004ae4 <_printf_common+0xa4>
 8004b16:	3601      	adds	r6, #1
 8004b18:	e7d9      	b.n	8004ace <_printf_common+0x8e>
	...

08004b1c <_printf_i>:
 8004b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b20:	7e0f      	ldrb	r7, [r1, #24]
 8004b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b24:	2f78      	cmp	r7, #120	; 0x78
 8004b26:	4691      	mov	r9, r2
 8004b28:	4680      	mov	r8, r0
 8004b2a:	460c      	mov	r4, r1
 8004b2c:	469a      	mov	sl, r3
 8004b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b32:	d807      	bhi.n	8004b44 <_printf_i+0x28>
 8004b34:	2f62      	cmp	r7, #98	; 0x62
 8004b36:	d80a      	bhi.n	8004b4e <_printf_i+0x32>
 8004b38:	2f00      	cmp	r7, #0
 8004b3a:	f000 80d8 	beq.w	8004cee <_printf_i+0x1d2>
 8004b3e:	2f58      	cmp	r7, #88	; 0x58
 8004b40:	f000 80a3 	beq.w	8004c8a <_printf_i+0x16e>
 8004b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b4c:	e03a      	b.n	8004bc4 <_printf_i+0xa8>
 8004b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b52:	2b15      	cmp	r3, #21
 8004b54:	d8f6      	bhi.n	8004b44 <_printf_i+0x28>
 8004b56:	a101      	add	r1, pc, #4	; (adr r1, 8004b5c <_printf_i+0x40>)
 8004b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b5c:	08004bb5 	.word	0x08004bb5
 8004b60:	08004bc9 	.word	0x08004bc9
 8004b64:	08004b45 	.word	0x08004b45
 8004b68:	08004b45 	.word	0x08004b45
 8004b6c:	08004b45 	.word	0x08004b45
 8004b70:	08004b45 	.word	0x08004b45
 8004b74:	08004bc9 	.word	0x08004bc9
 8004b78:	08004b45 	.word	0x08004b45
 8004b7c:	08004b45 	.word	0x08004b45
 8004b80:	08004b45 	.word	0x08004b45
 8004b84:	08004b45 	.word	0x08004b45
 8004b88:	08004cd5 	.word	0x08004cd5
 8004b8c:	08004bf9 	.word	0x08004bf9
 8004b90:	08004cb7 	.word	0x08004cb7
 8004b94:	08004b45 	.word	0x08004b45
 8004b98:	08004b45 	.word	0x08004b45
 8004b9c:	08004cf7 	.word	0x08004cf7
 8004ba0:	08004b45 	.word	0x08004b45
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004b45 	.word	0x08004b45
 8004bac:	08004b45 	.word	0x08004b45
 8004bb0:	08004cbf 	.word	0x08004cbf
 8004bb4:	682b      	ldr	r3, [r5, #0]
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	602a      	str	r2, [r5, #0]
 8004bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0a3      	b.n	8004d10 <_printf_i+0x1f4>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	6829      	ldr	r1, [r5, #0]
 8004bcc:	0606      	lsls	r6, r0, #24
 8004bce:	f101 0304 	add.w	r3, r1, #4
 8004bd2:	d50a      	bpl.n	8004bea <_printf_i+0xce>
 8004bd4:	680e      	ldr	r6, [r1, #0]
 8004bd6:	602b      	str	r3, [r5, #0]
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	da03      	bge.n	8004be4 <_printf_i+0xc8>
 8004bdc:	232d      	movs	r3, #45	; 0x2d
 8004bde:	4276      	negs	r6, r6
 8004be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004be4:	485e      	ldr	r0, [pc, #376]	; (8004d60 <_printf_i+0x244>)
 8004be6:	230a      	movs	r3, #10
 8004be8:	e019      	b.n	8004c1e <_printf_i+0x102>
 8004bea:	680e      	ldr	r6, [r1, #0]
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bf2:	bf18      	it	ne
 8004bf4:	b236      	sxthne	r6, r6
 8004bf6:	e7ef      	b.n	8004bd8 <_printf_i+0xbc>
 8004bf8:	682b      	ldr	r3, [r5, #0]
 8004bfa:	6820      	ldr	r0, [r4, #0]
 8004bfc:	1d19      	adds	r1, r3, #4
 8004bfe:	6029      	str	r1, [r5, #0]
 8004c00:	0601      	lsls	r1, r0, #24
 8004c02:	d501      	bpl.n	8004c08 <_printf_i+0xec>
 8004c04:	681e      	ldr	r6, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <_printf_i+0xf2>
 8004c08:	0646      	lsls	r6, r0, #25
 8004c0a:	d5fb      	bpl.n	8004c04 <_printf_i+0xe8>
 8004c0c:	881e      	ldrh	r6, [r3, #0]
 8004c0e:	4854      	ldr	r0, [pc, #336]	; (8004d60 <_printf_i+0x244>)
 8004c10:	2f6f      	cmp	r7, #111	; 0x6f
 8004c12:	bf0c      	ite	eq
 8004c14:	2308      	moveq	r3, #8
 8004c16:	230a      	movne	r3, #10
 8004c18:	2100      	movs	r1, #0
 8004c1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c1e:	6865      	ldr	r5, [r4, #4]
 8004c20:	60a5      	str	r5, [r4, #8]
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	bfa2      	ittt	ge
 8004c26:	6821      	ldrge	r1, [r4, #0]
 8004c28:	f021 0104 	bicge.w	r1, r1, #4
 8004c2c:	6021      	strge	r1, [r4, #0]
 8004c2e:	b90e      	cbnz	r6, 8004c34 <_printf_i+0x118>
 8004c30:	2d00      	cmp	r5, #0
 8004c32:	d04d      	beq.n	8004cd0 <_printf_i+0x1b4>
 8004c34:	4615      	mov	r5, r2
 8004c36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c3e:	5dc7      	ldrb	r7, [r0, r7]
 8004c40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c44:	4637      	mov	r7, r6
 8004c46:	42bb      	cmp	r3, r7
 8004c48:	460e      	mov	r6, r1
 8004c4a:	d9f4      	bls.n	8004c36 <_printf_i+0x11a>
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d10b      	bne.n	8004c68 <_printf_i+0x14c>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	07de      	lsls	r6, r3, #31
 8004c54:	d508      	bpl.n	8004c68 <_printf_i+0x14c>
 8004c56:	6923      	ldr	r3, [r4, #16]
 8004c58:	6861      	ldr	r1, [r4, #4]
 8004c5a:	4299      	cmp	r1, r3
 8004c5c:	bfde      	ittt	le
 8004c5e:	2330      	movle	r3, #48	; 0x30
 8004c60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c68:	1b52      	subs	r2, r2, r5
 8004c6a:	6122      	str	r2, [r4, #16]
 8004c6c:	f8cd a000 	str.w	sl, [sp]
 8004c70:	464b      	mov	r3, r9
 8004c72:	aa03      	add	r2, sp, #12
 8004c74:	4621      	mov	r1, r4
 8004c76:	4640      	mov	r0, r8
 8004c78:	f7ff fee2 	bl	8004a40 <_printf_common>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d14c      	bne.n	8004d1a <_printf_i+0x1fe>
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295
 8004c84:	b004      	add	sp, #16
 8004c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8a:	4835      	ldr	r0, [pc, #212]	; (8004d60 <_printf_i+0x244>)
 8004c8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c90:	6829      	ldr	r1, [r5, #0]
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c98:	6029      	str	r1, [r5, #0]
 8004c9a:	061d      	lsls	r5, r3, #24
 8004c9c:	d514      	bpl.n	8004cc8 <_printf_i+0x1ac>
 8004c9e:	07df      	lsls	r7, r3, #31
 8004ca0:	bf44      	itt	mi
 8004ca2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ca6:	6023      	strmi	r3, [r4, #0]
 8004ca8:	b91e      	cbnz	r6, 8004cb2 <_printf_i+0x196>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	f023 0320 	bic.w	r3, r3, #32
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	e7b0      	b.n	8004c18 <_printf_i+0xfc>
 8004cb6:	6823      	ldr	r3, [r4, #0]
 8004cb8:	f043 0320 	orr.w	r3, r3, #32
 8004cbc:	6023      	str	r3, [r4, #0]
 8004cbe:	2378      	movs	r3, #120	; 0x78
 8004cc0:	4828      	ldr	r0, [pc, #160]	; (8004d64 <_printf_i+0x248>)
 8004cc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cc6:	e7e3      	b.n	8004c90 <_printf_i+0x174>
 8004cc8:	0659      	lsls	r1, r3, #25
 8004cca:	bf48      	it	mi
 8004ccc:	b2b6      	uxthmi	r6, r6
 8004cce:	e7e6      	b.n	8004c9e <_printf_i+0x182>
 8004cd0:	4615      	mov	r5, r2
 8004cd2:	e7bb      	b.n	8004c4c <_printf_i+0x130>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	6826      	ldr	r6, [r4, #0]
 8004cd8:	6961      	ldr	r1, [r4, #20]
 8004cda:	1d18      	adds	r0, r3, #4
 8004cdc:	6028      	str	r0, [r5, #0]
 8004cde:	0635      	lsls	r5, r6, #24
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	d501      	bpl.n	8004ce8 <_printf_i+0x1cc>
 8004ce4:	6019      	str	r1, [r3, #0]
 8004ce6:	e002      	b.n	8004cee <_printf_i+0x1d2>
 8004ce8:	0670      	lsls	r0, r6, #25
 8004cea:	d5fb      	bpl.n	8004ce4 <_printf_i+0x1c8>
 8004cec:	8019      	strh	r1, [r3, #0]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	6123      	str	r3, [r4, #16]
 8004cf2:	4615      	mov	r5, r2
 8004cf4:	e7ba      	b.n	8004c6c <_printf_i+0x150>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	1d1a      	adds	r2, r3, #4
 8004cfa:	602a      	str	r2, [r5, #0]
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	6862      	ldr	r2, [r4, #4]
 8004d00:	2100      	movs	r1, #0
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7fb fa64 	bl	80001d0 <memchr>
 8004d08:	b108      	cbz	r0, 8004d0e <_printf_i+0x1f2>
 8004d0a:	1b40      	subs	r0, r0, r5
 8004d0c:	6060      	str	r0, [r4, #4]
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	2300      	movs	r3, #0
 8004d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d18:	e7a8      	b.n	8004c6c <_printf_i+0x150>
 8004d1a:	6923      	ldr	r3, [r4, #16]
 8004d1c:	462a      	mov	r2, r5
 8004d1e:	4649      	mov	r1, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	47d0      	blx	sl
 8004d24:	3001      	adds	r0, #1
 8004d26:	d0ab      	beq.n	8004c80 <_printf_i+0x164>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	079b      	lsls	r3, r3, #30
 8004d2c:	d413      	bmi.n	8004d56 <_printf_i+0x23a>
 8004d2e:	68e0      	ldr	r0, [r4, #12]
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	4298      	cmp	r0, r3
 8004d34:	bfb8      	it	lt
 8004d36:	4618      	movlt	r0, r3
 8004d38:	e7a4      	b.n	8004c84 <_printf_i+0x168>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d09b      	beq.n	8004c80 <_printf_i+0x164>
 8004d48:	3501      	adds	r5, #1
 8004d4a:	68e3      	ldr	r3, [r4, #12]
 8004d4c:	9903      	ldr	r1, [sp, #12]
 8004d4e:	1a5b      	subs	r3, r3, r1
 8004d50:	42ab      	cmp	r3, r5
 8004d52:	dcf2      	bgt.n	8004d3a <_printf_i+0x21e>
 8004d54:	e7eb      	b.n	8004d2e <_printf_i+0x212>
 8004d56:	2500      	movs	r5, #0
 8004d58:	f104 0619 	add.w	r6, r4, #25
 8004d5c:	e7f5      	b.n	8004d4a <_printf_i+0x22e>
 8004d5e:	bf00      	nop
 8004d60:	080058c9 	.word	0x080058c9
 8004d64:	080058da 	.word	0x080058da

08004d68 <memcpy>:
 8004d68:	440a      	add	r2, r1
 8004d6a:	4291      	cmp	r1, r2
 8004d6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d70:	d100      	bne.n	8004d74 <memcpy+0xc>
 8004d72:	4770      	bx	lr
 8004d74:	b510      	push	{r4, lr}
 8004d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d7e:	4291      	cmp	r1, r2
 8004d80:	d1f9      	bne.n	8004d76 <memcpy+0xe>
 8004d82:	bd10      	pop	{r4, pc}

08004d84 <memmove>:
 8004d84:	4288      	cmp	r0, r1
 8004d86:	b510      	push	{r4, lr}
 8004d88:	eb01 0402 	add.w	r4, r1, r2
 8004d8c:	d902      	bls.n	8004d94 <memmove+0x10>
 8004d8e:	4284      	cmp	r4, r0
 8004d90:	4623      	mov	r3, r4
 8004d92:	d807      	bhi.n	8004da4 <memmove+0x20>
 8004d94:	1e43      	subs	r3, r0, #1
 8004d96:	42a1      	cmp	r1, r4
 8004d98:	d008      	beq.n	8004dac <memmove+0x28>
 8004d9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004da2:	e7f8      	b.n	8004d96 <memmove+0x12>
 8004da4:	4402      	add	r2, r0
 8004da6:	4601      	mov	r1, r0
 8004da8:	428a      	cmp	r2, r1
 8004daa:	d100      	bne.n	8004dae <memmove+0x2a>
 8004dac:	bd10      	pop	{r4, pc}
 8004dae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004db2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004db6:	e7f7      	b.n	8004da8 <memmove+0x24>

08004db8 <_free_r>:
 8004db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	d044      	beq.n	8004e48 <_free_r+0x90>
 8004dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc2:	9001      	str	r0, [sp, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dca:	bfb8      	it	lt
 8004dcc:	18e4      	addlt	r4, r4, r3
 8004dce:	f000 f913 	bl	8004ff8 <__malloc_lock>
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <_free_r+0x94>)
 8004dd4:	9801      	ldr	r0, [sp, #4]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	b933      	cbnz	r3, 8004de8 <_free_r+0x30>
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	b003      	add	sp, #12
 8004de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de4:	f000 b90e 	b.w	8005004 <__malloc_unlock>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d908      	bls.n	8004dfe <_free_r+0x46>
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	1961      	adds	r1, r4, r5
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	e7ed      	b.n	8004dda <_free_r+0x22>
 8004dfe:	461a      	mov	r2, r3
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	b10b      	cbz	r3, 8004e08 <_free_r+0x50>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d9fa      	bls.n	8004dfe <_free_r+0x46>
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	1855      	adds	r5, r2, r1
 8004e0c:	42a5      	cmp	r5, r4
 8004e0e:	d10b      	bne.n	8004e28 <_free_r+0x70>
 8004e10:	6824      	ldr	r4, [r4, #0]
 8004e12:	4421      	add	r1, r4
 8004e14:	1854      	adds	r4, r2, r1
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	d1e0      	bne.n	8004dde <_free_r+0x26>
 8004e1c:	681c      	ldr	r4, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	6053      	str	r3, [r2, #4]
 8004e22:	4421      	add	r1, r4
 8004e24:	6011      	str	r1, [r2, #0]
 8004e26:	e7da      	b.n	8004dde <_free_r+0x26>
 8004e28:	d902      	bls.n	8004e30 <_free_r+0x78>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6003      	str	r3, [r0, #0]
 8004e2e:	e7d6      	b.n	8004dde <_free_r+0x26>
 8004e30:	6825      	ldr	r5, [r4, #0]
 8004e32:	1961      	adds	r1, r4, r5
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf04      	itt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	bf04      	itt	eq
 8004e40:	1949      	addeq	r1, r1, r5
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	6054      	str	r4, [r2, #4]
 8004e46:	e7ca      	b.n	8004dde <_free_r+0x26>
 8004e48:	b003      	add	sp, #12
 8004e4a:	bd30      	pop	{r4, r5, pc}
 8004e4c:	200003bc 	.word	0x200003bc

08004e50 <sbrk_aligned>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4e0e      	ldr	r6, [pc, #56]	; (8004e8c <sbrk_aligned+0x3c>)
 8004e54:	460c      	mov	r4, r1
 8004e56:	6831      	ldr	r1, [r6, #0]
 8004e58:	4605      	mov	r5, r0
 8004e5a:	b911      	cbnz	r1, 8004e62 <sbrk_aligned+0x12>
 8004e5c:	f000 f8bc 	bl	8004fd8 <_sbrk_r>
 8004e60:	6030      	str	r0, [r6, #0]
 8004e62:	4621      	mov	r1, r4
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 f8b7 	bl	8004fd8 <_sbrk_r>
 8004e6a:	1c43      	adds	r3, r0, #1
 8004e6c:	d00a      	beq.n	8004e84 <sbrk_aligned+0x34>
 8004e6e:	1cc4      	adds	r4, r0, #3
 8004e70:	f024 0403 	bic.w	r4, r4, #3
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d007      	beq.n	8004e88 <sbrk_aligned+0x38>
 8004e78:	1a21      	subs	r1, r4, r0
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f000 f8ac 	bl	8004fd8 <_sbrk_r>
 8004e80:	3001      	adds	r0, #1
 8004e82:	d101      	bne.n	8004e88 <sbrk_aligned+0x38>
 8004e84:	f04f 34ff 	mov.w	r4, #4294967295
 8004e88:	4620      	mov	r0, r4
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
 8004e8c:	200003c0 	.word	0x200003c0

08004e90 <_malloc_r>:
 8004e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e94:	1ccd      	adds	r5, r1, #3
 8004e96:	f025 0503 	bic.w	r5, r5, #3
 8004e9a:	3508      	adds	r5, #8
 8004e9c:	2d0c      	cmp	r5, #12
 8004e9e:	bf38      	it	cc
 8004ea0:	250c      	movcc	r5, #12
 8004ea2:	2d00      	cmp	r5, #0
 8004ea4:	4607      	mov	r7, r0
 8004ea6:	db01      	blt.n	8004eac <_malloc_r+0x1c>
 8004ea8:	42a9      	cmp	r1, r5
 8004eaa:	d905      	bls.n	8004eb8 <_malloc_r+0x28>
 8004eac:	230c      	movs	r3, #12
 8004eae:	603b      	str	r3, [r7, #0]
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	4630      	mov	r0, r6
 8004eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb8:	4e2e      	ldr	r6, [pc, #184]	; (8004f74 <_malloc_r+0xe4>)
 8004eba:	f000 f89d 	bl	8004ff8 <__malloc_lock>
 8004ebe:	6833      	ldr	r3, [r6, #0]
 8004ec0:	461c      	mov	r4, r3
 8004ec2:	bb34      	cbnz	r4, 8004f12 <_malloc_r+0x82>
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f7ff ffc2 	bl	8004e50 <sbrk_aligned>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	4604      	mov	r4, r0
 8004ed0:	d14d      	bne.n	8004f6e <_malloc_r+0xde>
 8004ed2:	6834      	ldr	r4, [r6, #0]
 8004ed4:	4626      	mov	r6, r4
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d140      	bne.n	8004f5c <_malloc_r+0xcc>
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4631      	mov	r1, r6
 8004ede:	4638      	mov	r0, r7
 8004ee0:	eb04 0803 	add.w	r8, r4, r3
 8004ee4:	f000 f878 	bl	8004fd8 <_sbrk_r>
 8004ee8:	4580      	cmp	r8, r0
 8004eea:	d13a      	bne.n	8004f62 <_malloc_r+0xd2>
 8004eec:	6821      	ldr	r1, [r4, #0]
 8004eee:	3503      	adds	r5, #3
 8004ef0:	1a6d      	subs	r5, r5, r1
 8004ef2:	f025 0503 	bic.w	r5, r5, #3
 8004ef6:	3508      	adds	r5, #8
 8004ef8:	2d0c      	cmp	r5, #12
 8004efa:	bf38      	it	cc
 8004efc:	250c      	movcc	r5, #12
 8004efe:	4629      	mov	r1, r5
 8004f00:	4638      	mov	r0, r7
 8004f02:	f7ff ffa5 	bl	8004e50 <sbrk_aligned>
 8004f06:	3001      	adds	r0, #1
 8004f08:	d02b      	beq.n	8004f62 <_malloc_r+0xd2>
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	442b      	add	r3, r5
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	e00e      	b.n	8004f30 <_malloc_r+0xa0>
 8004f12:	6822      	ldr	r2, [r4, #0]
 8004f14:	1b52      	subs	r2, r2, r5
 8004f16:	d41e      	bmi.n	8004f56 <_malloc_r+0xc6>
 8004f18:	2a0b      	cmp	r2, #11
 8004f1a:	d916      	bls.n	8004f4a <_malloc_r+0xba>
 8004f1c:	1961      	adds	r1, r4, r5
 8004f1e:	42a3      	cmp	r3, r4
 8004f20:	6025      	str	r5, [r4, #0]
 8004f22:	bf18      	it	ne
 8004f24:	6059      	strne	r1, [r3, #4]
 8004f26:	6863      	ldr	r3, [r4, #4]
 8004f28:	bf08      	it	eq
 8004f2a:	6031      	streq	r1, [r6, #0]
 8004f2c:	5162      	str	r2, [r4, r5]
 8004f2e:	604b      	str	r3, [r1, #4]
 8004f30:	4638      	mov	r0, r7
 8004f32:	f104 060b 	add.w	r6, r4, #11
 8004f36:	f000 f865 	bl	8005004 <__malloc_unlock>
 8004f3a:	f026 0607 	bic.w	r6, r6, #7
 8004f3e:	1d23      	adds	r3, r4, #4
 8004f40:	1af2      	subs	r2, r6, r3
 8004f42:	d0b6      	beq.n	8004eb2 <_malloc_r+0x22>
 8004f44:	1b9b      	subs	r3, r3, r6
 8004f46:	50a3      	str	r3, [r4, r2]
 8004f48:	e7b3      	b.n	8004eb2 <_malloc_r+0x22>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	bf0c      	ite	eq
 8004f50:	6032      	streq	r2, [r6, #0]
 8004f52:	605a      	strne	r2, [r3, #4]
 8004f54:	e7ec      	b.n	8004f30 <_malloc_r+0xa0>
 8004f56:	4623      	mov	r3, r4
 8004f58:	6864      	ldr	r4, [r4, #4]
 8004f5a:	e7b2      	b.n	8004ec2 <_malloc_r+0x32>
 8004f5c:	4634      	mov	r4, r6
 8004f5e:	6876      	ldr	r6, [r6, #4]
 8004f60:	e7b9      	b.n	8004ed6 <_malloc_r+0x46>
 8004f62:	230c      	movs	r3, #12
 8004f64:	603b      	str	r3, [r7, #0]
 8004f66:	4638      	mov	r0, r7
 8004f68:	f000 f84c 	bl	8005004 <__malloc_unlock>
 8004f6c:	e7a1      	b.n	8004eb2 <_malloc_r+0x22>
 8004f6e:	6025      	str	r5, [r4, #0]
 8004f70:	e7de      	b.n	8004f30 <_malloc_r+0xa0>
 8004f72:	bf00      	nop
 8004f74:	200003bc 	.word	0x200003bc

08004f78 <_realloc_r>:
 8004f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	4614      	mov	r4, r2
 8004f80:	460e      	mov	r6, r1
 8004f82:	b921      	cbnz	r1, 8004f8e <_realloc_r+0x16>
 8004f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f88:	4611      	mov	r1, r2
 8004f8a:	f7ff bf81 	b.w	8004e90 <_malloc_r>
 8004f8e:	b92a      	cbnz	r2, 8004f9c <_realloc_r+0x24>
 8004f90:	f7ff ff12 	bl	8004db8 <_free_r>
 8004f94:	4625      	mov	r5, r4
 8004f96:	4628      	mov	r0, r5
 8004f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f9c:	f000 f838 	bl	8005010 <_malloc_usable_size_r>
 8004fa0:	4284      	cmp	r4, r0
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	d802      	bhi.n	8004fac <_realloc_r+0x34>
 8004fa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004faa:	d812      	bhi.n	8004fd2 <_realloc_r+0x5a>
 8004fac:	4621      	mov	r1, r4
 8004fae:	4640      	mov	r0, r8
 8004fb0:	f7ff ff6e 	bl	8004e90 <_malloc_r>
 8004fb4:	4605      	mov	r5, r0
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0ed      	beq.n	8004f96 <_realloc_r+0x1e>
 8004fba:	42bc      	cmp	r4, r7
 8004fbc:	4622      	mov	r2, r4
 8004fbe:	4631      	mov	r1, r6
 8004fc0:	bf28      	it	cs
 8004fc2:	463a      	movcs	r2, r7
 8004fc4:	f7ff fed0 	bl	8004d68 <memcpy>
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4640      	mov	r0, r8
 8004fcc:	f7ff fef4 	bl	8004db8 <_free_r>
 8004fd0:	e7e1      	b.n	8004f96 <_realloc_r+0x1e>
 8004fd2:	4635      	mov	r5, r6
 8004fd4:	e7df      	b.n	8004f96 <_realloc_r+0x1e>
	...

08004fd8 <_sbrk_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4d06      	ldr	r5, [pc, #24]	; (8004ff4 <_sbrk_r+0x1c>)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	4604      	mov	r4, r0
 8004fe0:	4608      	mov	r0, r1
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	f7fc fdac 	bl	8001b40 <_sbrk>
 8004fe8:	1c43      	adds	r3, r0, #1
 8004fea:	d102      	bne.n	8004ff2 <_sbrk_r+0x1a>
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	b103      	cbz	r3, 8004ff2 <_sbrk_r+0x1a>
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	bd38      	pop	{r3, r4, r5, pc}
 8004ff4:	200003c4 	.word	0x200003c4

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <__malloc_lock+0x8>)
 8004ffa:	f000 b811 	b.w	8005020 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200003c8 	.word	0x200003c8

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	; (800500c <__malloc_unlock+0x8>)
 8005006:	f000 b80c 	b.w	8005022 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200003c8 	.word	0x200003c8

08005010 <_malloc_usable_size_r>:
 8005010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005014:	1f18      	subs	r0, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbc      	itt	lt
 800501a:	580b      	ldrlt	r3, [r1, r0]
 800501c:	18c0      	addlt	r0, r0, r3
 800501e:	4770      	bx	lr

08005020 <__retarget_lock_acquire_recursive>:
 8005020:	4770      	bx	lr

08005022 <__retarget_lock_release_recursive>:
 8005022:	4770      	bx	lr

08005024 <_init>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr

08005030 <_fini>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr
